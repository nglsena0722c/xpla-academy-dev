"use strict";(self.webpackChunkxpla_academy=self.webpackChunkxpla_academy||[]).push([[1275],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||s;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[d]="string"==typeof e?e:r,o[1]=i;for(var c=2;c<s;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},34673:(e,t,n)=>{n.d(t,{Z:()=>h});var a=n(87462),r=n(67294),s=n(86010),o=n(72389),i=n(86043);const l={details:"details_lb9f",isBrowser:"isBrowser_bmU9",collapsibleContent:"collapsibleContent_i85q"};function c(e){return!!e&&("SUMMARY"===e.tagName||c(e.parentElement))}function p(e,t){return!!e&&(e===t||p(e.parentElement,t))}function d(e){let{summary:t,children:n,...d}=e;const u=(0,o.Z)(),m=(0,r.useRef)(null),{collapsed:h,setCollapsed:w}=(0,i.u)({initialState:!d.open}),[f,g]=(0,r.useState)(d.open),k=r.isValidElement(t)?t:r.createElement("summary",null,t??"Details");return r.createElement("details",(0,a.Z)({},d,{ref:m,open:f,"data-collapsed":h,className:(0,s.Z)(l.details,u&&l.isBrowser,d.className),onMouseDown:e=>{c(e.target)&&e.detail>1&&e.preventDefault()},onClick:e=>{e.stopPropagation();const t=e.target;c(t)&&p(t,m.current)&&(e.preventDefault(),h?(w(!1),g(!0)):w(!0))}}),k,r.createElement(i.z,{lazy:!1,collapsed:h,disableSSRStyle:!0,onCollapseTransitionEnd:e=>{w(e),g(!e)}},r.createElement("div",{className:l.collapsibleContent},n)))}const u={details:"details_b_Ee"},m="alert alert--info";function h(e){let{...t}=e;return r.createElement(d,(0,a.Z)({},t,{className:(0,s.Z)(m,u.details,t.className)}))}},88988:(e,t,n)=>{n.d(t,{I_:()=>r,dP:()=>s,wg:()=>o});var a=n(67294);const r=()=>a.createElement("img",{style:{marginBottom:-2},src:"/xpla-academy-dev/img/3-tutorial/3-deep-understand-xpla/5-convert/academy-diamond.svg",width:"16",height:"16"}),s=()=>a.createElement("img",{style:{marginBottom:-2},src:"/xpla-academy-dev/img/3-tutorial/3-deep-understand-xpla/5-convert/academy-token.svg",width:"16",height:"16"}),o=()=>a.createElement("img",{style:{marginBottom:-2},src:"/xpla-academy-dev/img/logo192.png",width:"16",height:"16"})},25077:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var a=n(87462),r=(n(67294),n(3905)),s=n(34673),o=n(88988);const i={sidebar_position:6},l="Design Swap System",c={unversionedId:"tutorial/deep-understand-xpla/swap",id:"tutorial/deep-understand-xpla/swap",title:"Design Swap System",description:"The swap system facilitates easy token exchanges, allowing for the seamless swapping of CW20 tokens() for $XPLA(), as well as for other CW20 tokens!",source:"@site/startlearning/3-tutorial/3-deep-understand-xpla/6-swap.mdx",sourceDirName:"3-tutorial/3-deep-understand-xpla",slug:"/tutorial/deep-understand-xpla/swap",permalink:"/xpla-academy-dev/ko-kr/startlearning/tutorial/deep-understand-xpla/swap",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Design Convert System",permalink:"/xpla-academy-dev/ko-kr/startlearning/tutorial/deep-understand-xpla/convert"}},p={},d=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"0. Prepare CW20 Tokens",id:"make-cw20",level:3},{value:"1. Create Pair",id:"create-swap-pool",level:3},{value:"2. Increase Allowance",id:"increase-allowance",level:3},{value:"3. Provide Liquidity",id:"provide-liquidity",level:3},{value:"4. Execute Swap",id:"execute-swap",level:3},{value:"Conclusion",id:"conclusion",level:2}],u={toc:d},m="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"design-swap-system"},"Design Swap System"),(0,r.kt)("p",null,"The swap system facilitates easy token exchanges, allowing for the seamless swapping of CW20 tokens(",(0,r.kt)(o.dP,{mdxType:"ACADEMYTKN"}),") for $XPLA(",(0,r.kt)(o.wg,{mdxType:"TESTNETXPLA"}),"), as well as for other CW20 tokens!"),(0,r.kt)("p",null,"\ud83d\ude40 Can't wait to try out the swap feature?\nYou can do so at ",(0,r.kt)("a",{parentName:"p",href:"/ops"},"Web3 Gaming Ops"),"!\nIn this lesson, we'll delve into the mechanics of how swapping is structured between CW20 tokens(",(0,r.kt)(o.dP,{mdxType:"ACADEMYTKN"}),") and $XPLA(",(0,r.kt)(o.wg,{mdxType:"TESTNETXPLA"}),").\nBut first, let's refresh our understanding of what a ",(0,r.kt)("a",{parentName:"p",href:"https://explorer.xpla.io/testnet/address/xpla1j4kgjl6h4rt96uddtzdxdu39h0mhn4vrtydufdrk4uxxnrpsnw2qug2yx2"},"Pair")," is and how it forms the foundation of the swap feature."),(0,r.kt)(s.Z,{summary:"What is Pair?",mdxType:"Details"},"Pair is a smart contract that stores coins and tokens for swap. Let's assume that Alice requests a Swap in the Pair contract, exchanging her coin A for coin B. In this process, the Pair contract will give Alice B coin from its reserves in exchange for her A coin. This is how a Swap is carried out, and it's important to note that Pair is essential for this operation."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"In this lesson, we are using the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/dezswap"},"Dezswap Contract")," to create the Pair.\nThis contract employs the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.dezswap.io/docs/introduction/mechanism/"},"Automated Market-Maker (AMM) protocol"),".\nFor more detailed information, please refer to the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.dezswap.io/"},"Dezswap Docs"),".\nYou are welcome to develop a new contract to create your own Pair, or you can use Dezswap as demonstrated in the example.")),(0,r.kt)("h2",{id:"table-of-contents"},"Table of Contents"),(0,r.kt)("p",null,"The Swap feature is designed in the following steps."),(0,r.kt)("ol",{start:0},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"/startlearning/tutorial/deep-understand-xpla/swap#make-cw20"},"Prepare CW20 Tokens"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"/startlearning/tutorial/deep-understand-xpla/swap#create-swap-pool"},"Create Pair"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"/startlearning/tutorial/deep-understand-xpla/swap#increase-allowance"},"Increase Allowance"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"/startlearning/tutorial/deep-understand-xpla/swap#provide-liquidity"},"Provide Liquidity"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"/startlearning/tutorial/deep-understand-xpla/swap#execute-swap"},"Execute Swap")))),(0,r.kt)("h3",{id:"make-cw20"},"0. Prepare CW20 Tokens"),(0,r.kt)("p",null,"For the example, we have created a CW20 token named ",(0,r.kt)("inlineCode",{parentName:"p"},"ACAD"),". The contract address for this token is ",(0,r.kt)("a",{parentName:"p",href:"https://explorer.xpla.io/testnet/address/xpla13mxqv7yqedcpm67fw7yz7p4s32rlsdkaae3ecmc0tram72ewefts2uu3ax"},"xpla13mxqv7yqedcpm67fw7yz7p4s32rlsdkaae3ecmc0tram72ewefts2uu3ax"),"."),(0,r.kt)("p",null,"Below is the JavaScript code used to create the CW20 token. This code is similar to the one used in ",(0,r.kt)("a",{parentName:"p",href:"/startlearning/tutorial/make-cw20/make-cw20-with-js"},"Issue and Transfer Tokens (CW20) using JavaScript"),", with modifications only to the name and symbol:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"{17,18}","{17,18}":!0},"const { LCDClient, MnemonicKey, MsgInstantiateContract } = require(\"@xpla/xpla.js\");\n\nconst lcd = new LCDClient({\n    chainID: 'cube_47-5',\n    URL: 'https://cube-lcd.xpla.dev'\n});\n\nconst main = async () => {\n    const mk = new MnemonicKey({\n        mnemonic: 'myth snow ski simple century dad gun dolphin sail lawsuit fringe image toast betray frown keep harbor flash table prevent isolate panic tag vehicle' // \uc5ec\ub7ec\ubd84\uc758 \ub2c8\ubaa8\ub2c9 \ub2e8\uc5b4\ub85c \ubc14\uafd4\uc8fc\uc138\uc694.\n    })\n\n    const wallet = lcd.wallet(mk);\n    const myWalletAddress = wallet.key.accAddress;\n\n    const init_msg = {\n        name: \"CW20 Contract for Swap Tutorial\", \n        symbol: \"ACAD\", \n        decimals: 6,\n        initial_balances: [{ address: myWalletAddress, amount: \"2000000000000000\" }], \n        mint: { \n            minter: myWalletAddress\n        }\n    };\n\n    const instantiate = new MsgInstantiateContract(\n        myWalletAddress, \n        myWalletAddress, \n        1,\n        init_msg,\n        {},\n        'Example for Swap',\n    );\n\n    const signedTx = await lcd.wallet(mk).createAndSignTx({ \n        msgs: [instantiate]\n    });\n\n    const txResult = await lcd.tx.broadcastSync(signedTx);\n    console.log(txResult.txhash);\n}\nmain()\n")),(0,r.kt)("h3",{id:"create-swap-pool"},"1. Create Pair"),(0,r.kt)("p",null,"For the example, we will use Dezswap's ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/dezswap/dezswap-contracts/tree/main/contracts/dezswap_factory"},"dezswap_factory contract")," to create a Pair.\nFactory contract performs the function of managing token Pair.\nThe contract address for dezswap_factory is ",(0,r.kt)("inlineCode",{parentName:"p"},"xpla1j33xdql0h4kpgj2mhggy4vutw655u90z7nyj4afhxgj4v5urtadq44e3vd")," on the Mainnet and ",(0,r.kt)("inlineCode",{parentName:"p"},"xpla1j4kgjl6h4rt96uddtzdxdu39h0mhn4vrtydufdrk4uxxnrpsnw2qug2yx2")," on the Testnet."),(0,r.kt)("p",null,"The JavaScript code to Execute the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/dezswap/dezswap-contracts/tree/main/contracts/dezswap_factory#create_pair"},"create_pair function")," of the dezswap_factory contract is as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"{16,27,35}","{16,27,35}":!0},'const { LCDClient, MnemonicKey, MsgExecuteContract } = require("@xpla/xpla.js");\n\nconst lcd = new LCDClient({\n    chainID: \'cube_47-5\',\n    URL: \'https://cube-lcd.xpla.dev\'\n});\n\nconst main = async () => {\n    const mk = new MnemonicKey({\n        mnemonic: \'myth snow ski simple century dad gun dolphin sail lawsuit fringe image toast betray frown keep harbor flash table prevent isolate panic tag vehicle\'\n    })\n\n    const wallet = lcd.wallet(mk);\n    const myWalletAddress = wallet.key.accAddress;\n\n    const testnet_dezswap_factory = "xpla1j4kgjl6h4rt96uddtzdxdu39h0mhn4vrtydufdrk4uxxnrpsnw2qug2yx2";\n\n    const createPairMsg = new MsgExecuteContract(\n        myWalletAddress,\n        testnet_dezswap_factory,\n        {\n            "create_pair": {\n                "assets": [\n                    {\n                        "info": {\n                            "native_token": {\n                                "denom": "axpla"\n                            }\n                        },\n                        "amount": "0"\n                    },\n                    {\n                        "info": {\n                            "token": {\n                                "contract_addr": "xpla13mxqv7yqedcpm67fw7yz7p4s32rlsdkaae3ecmc0tram72ewefts2uu3ax" // Your Contract Address\n                            }\n                        },\n                        "amount": "0"\n                    }\n                ]\n            }\n        }\n    );\n\n    const signedTx = await lcd.wallet(mk).createAndSignTx({\n        msgs: [createPairMsg]\n    });\n\n    const txResult = await lcd.tx.broadcastSync(signedTx);\n    console.log(txResult.txhash);\n}\nmain()\n')),(0,r.kt)("p",null,"After executing the above code, we created a Pair on the Testnet!\nThe transaction can be found on the ",(0,r.kt)("a",{parentName:"p",href:"https://explorer.xpla.io/testnet/tx/1b6f0d98e79b3232cb2f8c9df6b46f4859b70820facf063a66710f90c158b642#Messages"},"XPLA Explorer"),".\nWhen you executing this code, remember to fill in the ",(0,r.kt)("inlineCode",{parentName:"p"},"contract_addr")," field with the address of the CW20 token contract you created."),(0,r.kt)("p",null,"Upon reviewing the ",(0,r.kt)("a",{parentName:"p",href:"https://explorer.xpla.io/testnet/tx/1B6F0D98E79B3232CB2F8C9DF6B46F4859B70820FACF063A66710F90C158B642#EventLogs"},"Event Logs"),", you can see that new contracts have been instantiated.\nAmong these, the contract with ",(0,r.kt)("inlineCode",{parentName:"p"},"code_id")," 369 is the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/dezswap/dezswap-contracts/tree/main/contracts/dezswap_pair"},"dezswap_pair Contract"),", and the one with code_id 110 is the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/dezswap/dezswap-contracts/tree/main/contracts/dezswap_token"},"dezswap_token Contract")," (note that these ",(0,r.kt)("inlineCode",{parentName:"p"},"code_ids")," are based on Testnet, and the ",(0,r.kt)("inlineCode",{parentName:"p"},"code_ids")," on Mainnet will be different).\nIn this example, the dezswap_pair Contract is at ",(0,r.kt)("a",{parentName:"p",href:"https://explorer.xpla.io/testnet/address/xpla1hzmcz38u28g6duy4gmur705e8qrdq7uvzsue4d8hdvclxz79uppsw3hfns#InitMsg"},"xpla1hzmcz38u28g6duy4gmur705e8qrdq7uvzsue4d8hdvclxz79uppsw3hfns"),", and the dezswap_token Contract is at ",(0,r.kt)("a",{parentName:"p",href:"https://explorer.xpla.io/testnet/address/xpla1ntr800lgjg59d79tr9c78kxjv9v9wm04hjdyq945663juf23hvqq0xy057#InitMsg"},"xpla1ntr800lgjg59d79tr9c78kxjv9v9wm04hjdyq945663juf23hvqq0xy057"),"."),(0,r.kt)(s.Z,{summary:"How can I go about creating a Pair for exchanging between CW20 tokens?",mdxType:"Details"},(0,r.kt)("p",null,"In the code mentioned earlier, you can define the createPairMsg variable as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"{7-14}","{7-14}":!0},'const createPairMsg = new MsgExecuteContract(\n    myWalletAddress,\n    testnet_dezswap_factory,\n    {\n        "create_pair": {\n            "assets": [\n                {\n                    "info": {\n                        "token": {\n                            "contract_addr": "xpla13mxqv7yqedcpm67fw7yz7p4s32rlsdkaae3ecmc0tram72ewefts2uu3ax" // Your Contract Address1\n                        }\n                    },\n                    "amount": "0"\n                },\n                {\n                    "info": {\n                        "token": {\n                            "contract_addr": "xpla13mxqv7yqedcpm67fw7yz7p4s32rlsdkaae3ecmc0tram72ewefts2uu3ax" // Your Contract Address2\n                        }\n                    },\n                    "amount": "0"\n                }\n            ]\n        }\n    }\n);\n'))),(0,r.kt)("h3",{id:"increase-allowance"},"2. Increase Allowance"),(0,r.kt)("p",null,"First, you need to supply CW20 tokens and $XPLA to the dezswap_pair Contract in the ",(0,r.kt)("a",{parentName:"p",href:"/startlearning/tutorial/deep-understand-xpla/swap#provide-liquidity"},"3. Provide Liquidity step"),".\nHere, ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/dezswap/dezswap-contracts/blob/main/contracts/dezswap_pair/src/contract.rs#L366"},"the dezswap_pair Contract executes the TransferFrom function of the CW20 token")," to retrieve the CW20 tokens from the wallet providing them.\nTo ensure a smooth liquidity provision, you must allow the dezswap_pair contract to take the CW20 tokens.\nTherefore, we will execute the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/CosmWasm/cw-plus/blob/main/packages/cw20/README.md#messages-1"},"IncreaseAllowance")," function of the CW20 token Contract."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"{16,23,24}","{16,23,24}":!0},'const { LCDClient, MnemonicKey, MsgExecuteContract } = require("@xpla/xpla.js");\n\nconst lcd = new LCDClient({\n    chainID: \'cube_47-5\',\n    URL: \'https://cube-lcd.xpla.dev\'\n});\n\nconst main = async () => {\n    const mk = new MnemonicKey({\n        mnemonic: \'myth snow ski simple century dad gun dolphin sail lawsuit fringe image toast betray frown keep harbor flash table prevent isolate panic tag vehicle\'\n    })\n\n    const wallet = lcd.wallet(mk);\n    const myWalletAddress = wallet.key.accAddress;\n\n    const cw20_contract_address = "xpla13mxqv7yqedcpm67fw7yz7p4s32rlsdkaae3ecmc0tram72ewefts2uu3ax"; // Your CW20 Contract Address\n\n    const increaseAllowanceMsg = new MsgExecuteContract(\n        myWalletAddress,\n        cw20_contract_address,\n        {\n            "increase_allowance": {\n              "amount": "10000000000",\n              "spender": "xpla1hzmcz38u28g6duy4gmur705e8qrdq7uvzsue4d8hdvclxz79uppsw3hfns" // dezswap_pair Contract Address\n            }\n          }\n    );\n\n    const signedTx = await lcd.wallet(mk).createAndSignTx({\n        msgs: [increaseAllowanceMsg]\n    });\n\n    const txResult = await lcd.tx.broadcastSync(signedTx);\n    console.log(txResult.txhash);\n}\nmain()\n')),(0,r.kt)("p",null,"The result of the above can be checked on the ",(0,r.kt)("a",{parentName:"p",href:"https://explorer.xpla.io/testnet/tx/0f19ff4c0d8592addd567c5eb7ae63d0869b6b2f8007b42a49b765bcca6189b7#Messages"},"XPLA Explorer"),".\nWhen you run it, you need to enter the address of your CW20 token contract into the ",(0,r.kt)("inlineCode",{parentName:"p"},"cw20_contract_address")," variable and the address of the dezswap_pair contract you created into the ",(0,r.kt)("inlineCode",{parentName:"p"},"spender")," field.\nIn the example, we set the amount value to ",(0,r.kt)("inlineCode",{parentName:"p"},"10000000000"),".\nSince the decimals value of the ",(0,r.kt)("inlineCode",{parentName:"p"},"ACAD")," CW20 token is 6, this allows for the provision of up to 10,000 ",(0,r.kt)("inlineCode",{parentName:"p"},"ACAD")," tokens."),(0,r.kt)("h3",{id:"provide-liquidity"},"3. Provide Liquidity"),(0,r.kt)("p",null,"To provide liquidity to the Pair created in step 1, we will execute the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/dezswap/dezswap-contracts/tree/main/contracts/dezswap_pair#request-format"},"provide_liquidity function")," of the dezswap_pair Contract."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"{16,30,38,43,44,45}","{16,30,38,43,44,45}":!0},'const { LCDClient, MnemonicKey, MsgExecuteContract, Coin } = require("@xpla/xpla.js");\n\nconst lcd = new LCDClient({\n    chainID: \'cube_47-5\',\n    URL: \'https://cube-lcd.xpla.dev\'\n});\n\nconst main = async () => {\n    const mk = new MnemonicKey({\n        mnemonic: \'myth snow ski simple century dad gun dolphin sail lawsuit fringe image toast betray frown keep harbor flash table prevent isolate panic tag vehicle\'\n    })\n\n    const wallet = lcd.wallet(mk);\n    const myWalletAddress = wallet.key.accAddress;\n\n    const dezswap_pair_contract_address = "xpla1hzmcz38u28g6duy4gmur705e8qrdq7uvzsue4d8hdvclxz79uppsw3hfns"; // dezswap_pair Contract Address\n\n    const provideLiquidityMsg = new MsgExecuteContract(\n        myWalletAddress,\n        dezswap_pair_contract_address,\n        {\n            "provide_liquidity": {\n                "assets": [\n                    {\n                        "info": {\n                            "native_token": {\n                                "denom": "axpla"\n                            }\n                        },\n                        "amount": "10000000000000000000"\n                    },\n                    {\n                        "info": {\n                            "token": {\n                                "contract_addr": "xpla13mxqv7yqedcpm67fw7yz7p4s32rlsdkaae3ecmc0tram72ewefts2uu3ax" // Your Contract Address\n                            }\n                        },\n                        "amount": "10000000000"\n                    }\n                ]\n            }\n        },\n        [new Coin(\n            "axpla",\n            "10000000000000000000"\n        )],\n    );\n\n    const signedTx = await lcd.wallet(mk).createAndSignTx({\n        msgs: [provideLiquidityMsg],\n    });\n\n    const txResult = await lcd.tx.broadcastSync(signedTx);\n    console.log(txResult.txhash);\n}\nmain()\n')),(0,r.kt)("p",null,"You can check the outcome of running this code on the ",(0,r.kt)("a",{parentName:"p",href:"https://explorer.xpla.io/testnet/tx/2e5c9c1e142599784df050437e3f97ca84d0dc082bd86d3ba82be6b3b5402e08#Messages"},"XPLA Explorer"),".\nFor both the XPLA and CW20 token, we specified the quantities we wanted to supply in the amount field.\nAs a result, we provided a total of 10 XPLA and 10,000 ",(0,r.kt)("inlineCode",{parentName:"p"},"ACAD"),"."),(0,r.kt)("p",null,"When creating the provideLiquidityMsg variable, it's important to note a key difference from previous steps: you need to input the axpla value as the last parameter.\nThis enables the simultaneous supply of XPLA to the dezswap_pair Contract at the time of transaction execution.\nAs for the CW20 token provision, it was retrieved by the dezswap_pair Contract, as explored in the ",(0,r.kt)("a",{parentName:"p",href:"/startlearning/tutorial/deep-understand-xpla/swap#increase-allowance"},"2. Increase allowance")," stage."),(0,r.kt)("h3",{id:"execute-swap"},"4. Execute Swap"),(0,r.kt)("p",null,"Now let's proceed with a Swap. In this example, we will exchange 1 ",(0,r.kt)("inlineCode",{parentName:"p"},"ACAD")," token for XPLA. The format for the Contract Execute message was referenced from the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/dezswap/dezswap-contracts/tree/main/contracts/dezswap_pair#swap"},"dezswap GitHub"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"{16,23}","{16,23}":!0},'const { LCDClient, MnemonicKey, MsgExecuteContract } = require("@xpla/xpla.js");\n\nconst lcd = new LCDClient({\n    chainID: \'cube_47-5\',\n    URL: \'https://cube-lcd.xpla.dev\'\n});\n\nconst main = async () => {\n    const mk = new MnemonicKey({\n        mnemonic: \'myth snow ski simple century dad gun dolphin sail lawsuit fringe image toast betray frown keep harbor flash table prevent isolate panic tag vehicle\'\n    })\n\n    const wallet = lcd.wallet(mk);\n    const myWalletAddress = wallet.key.accAddress;\n\n    const token_contract_address = "xpla13mxqv7yqedcpm67fw7yz7p4s32rlsdkaae3ecmc0tram72ewefts2uu3ax"; // Your Contract Address\n    \n    const swapMsg = new MsgExecuteContract(\n        myWalletAddress,\n        token_contract_address,\n        {\n            "send": {\n                "contract": "xpla1hzmcz38u28g6duy4gmur705e8qrdq7uvzsue4d8hdvclxz79uppsw3hfns", // dezswap_pair Contract Address\n                "amount": "1000000",\n                "msg": btoa(JSON.stringify({\n                    "swap": {\n                        // "belief_price": Option<Decimal>,\n                        // "max_spread": Option<Decimal>,\n                        // "to": Option<HumanAddr>\n                    }\n                }))\n            }\n        }\n    );\n\n    const signedTx = await lcd.wallet(mk).createAndSignTx({\n        msgs: [swapMsg],\n    });\n\n    const txResult = await lcd.tx.broadcastSync(signedTx);\n    console.log(txResult.txhash);\n}\nmain()\n')),(0,r.kt)("p",null,"You can verify the results of running the above code on the ",(0,r.kt)("a",{parentName:"p",href:"https://explorer.xpla.io/testnet/tx/02f8495b6df3526dc5ce9d149129788ae1683d89167d14b5336e092e403bc31c#TokenTransfers"},"XPLA Explorer"),".\nYou need to input the CW20 contract address in the ",(0,r.kt)("inlineCode",{parentName:"p"},"token_contract_address")," variable and the dezswap_pair contract address in the ",(0,r.kt)("inlineCode",{parentName:"p"},"contract")," field within the msg.\nIt's important to note that the contract to be executed differs when exchanging XPLA for CW20 tokens.\nFor more details, please refer to the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/dezswap/dezswap-contracts/tree/main/contracts/dezswap_pair#swap"},"dezswap GitHub"),"."),(0,r.kt)("p",null,"Now, you might wonder why, after putting in 1 ",(0,r.kt)("inlineCode",{parentName:"p"},"ACAD")," token, you received about 0.0001 XPLA.\nThis is because, during the ",(0,r.kt)("a",{parentName:"p",href:"/startlearning/tutorial/deep-understand-xpla/swap#provide-liquidity"},"3. Provide Liquidity")," stage, a total of 10 XPLA and 10,000 ACAD were supplied to the Pair.\nTherefore, the product of the number of tokens in the Pair should always be maintained at 10 \xd7 10,000 = 100,000(",(0,r.kt)("a",{parentName:"p",href:"https://docs.dezswap.io/docs/introduction/mechanism/"},"CPMM"),").\nWhen 1 ",(0,r.kt)("inlineCode",{parentName:"p"},"ACAD")," token is added, the product of the token numbers in the Pair should be (10 - XPLA_out) \xd7 (10,000 + 1) = 100,000. "),(0,r.kt)("p",null,"Also, with dezswap, there's a ",(0,r.kt)("a",{parentName:"p",href:"https://docs.dezswap.io/docs/introduction/trading-fees/"},"LP Commission of 0.3% given to the liquidity provider"),"during a swap.\nAfter accounting for this 0.3% fee, you end up receiving about 0.0001 XPLA.\nFor a more detailed explanation, you can consult the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.dezswap.io/docs/introduction/mechanism/"},"dezswap Docs"),"."),(0,r.kt)(s.Z,{summary:"How do I exchange XPLA for CW20 tokens?",mdxType:"Details"},(0,r.kt)("p",null,"In the code above, you can enter the swapMsg as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"{3,19-22}","{3,19-22}":!0},'const swapMsg = new MsgExecuteContract(\n    myWalletAddress,\n    dezswap_pair_contract_address,\n    {\n        "swap": {\n            "offer_asset": {\n                "info": {\n                    "native_token": {\n                        "denom": "axpla"\n                    }\n                },\n                "amount": "1000000000000000000"\n            },\n            //"belief_price": Option<Decimal>,\n            //"max_spread": Option<Decimal>,\n            //"to": Option<HumanAddr>\n        }\n    },\n    [new Coin(\n        "axpla",\n        "1000000000000000000"\n    )],\n);\n')),(0,r.kt)("p",null,"When exchanging CW20 tokens for XPLA, you executed the CW20 token contract.\nHowever, to exchange XPLA for CW20 tokens, you must execute the ",(0,r.kt)("u",null,"dezswap_pair_contract_address"),". Additionally, you need to include the amount of XPLA you want to swap as a contract parameter, using the ",(0,r.kt)("inlineCode",{parentName:"p"},'new Coin("axpla", "..")')," format.")),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"We have explored how to develop a Swap feature using the Dezswap contract. Now, try connecting the CW20 token from your developed game with XPLA through the Swap contract."))}h.isMDXComponent=!0}}]);