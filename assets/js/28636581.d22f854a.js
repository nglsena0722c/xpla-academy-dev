"use strict";(self.webpackChunkxpla_academy=self.webpackChunkxpla_academy||[]).push([[2129],{51007:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(67294),o=n(86010);const l={browserWindow:"browserWindow_my1Q",browserWindowHeader:"browserWindowHeader_jXSR",row:"row_KZDM",buttons:"buttons_uHc7",right:"right_oyze",browserWindowAddressBar:"browserWindowAddressBar_Pd8y",dot:"dot_giz1",browserWindowMenuIcon:"browserWindowMenuIcon_Vhuh",bar:"bar_rrRL",browserWindowBody:"browserWindowBody_Idgs"};function r(e){let{children:t,minHeight:n,url:r="http://localhost:3000",style:s,bodyStyle:i}=e;return a.createElement("div",{className:l.browserWindow,style:{...s,minHeight:n}},a.createElement("div",{className:l.browserWindowHeader},a.createElement("div",{className:l.buttons},a.createElement("span",{className:l.dot,style:{background:"#f25f58"}}),a.createElement("span",{className:l.dot,style:{background:"#fbbe3c"}}),a.createElement("span",{className:l.dot,style:{background:"#58cb42"}})),a.createElement("div",{className:(0,o.Z)(l.browserWindowAddressBar,"text--truncate")},r),a.createElement("div",{className:l.browserWindowMenuIcon},a.createElement("div",null,a.createElement("span",{className:l.bar}),a.createElement("span",{className:l.bar}),a.createElement("span",{className:l.bar})))),a.createElement("div",{className:l.browserWindowBody,style:i},t))}},61497:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(67294);const o=e=>{let{imgSrc:t,style:n}=e;return a.createElement("img",{className:"max-w-sm",style:n,src:t,alt:""})}},57047:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>w,contentTitle:()=>k,default:()=>C,frontMatter:()=>f,metadata:()=>v,toc:()=>b});var a=n(87462),o=n(67294),l=n(3905),r=n(18947),s=n(60614);const i='import {\n    useConnectedWallet,\n    UserDenied,\n    useWallet,\n    WalletStatus,\n} from "@xpla/wallet-provider";\nimport React, { useState, useEffect } from "react";\nimport { LCDClient, MsgSend } from "@xpla/xpla.js";\n\nexport default function App() {\n    const lcd = new LCDClient({\n        chainID: \'cube_47-5\',\n        URL: \'https://cube-lcd.xpla.dev\'\n    });\n\n    const {\n        status,\n        network,\n        wallets,\n        connect,\n        disconnect\n    } = useWallet();\n\n    const connectedWallet = useConnectedWallet();\n\n    const [amount, setAmount] = useState("");\n    const [recipient, setRecipient] = useState("");\n\n    const [loading, setLoading] = useState(1);\n    const [txResult, setTxResult] = useState(null);\n    const [txError, setTxError] = useState(null);\n\n    const handleSend = async () => {\n        try {\n            const transactionMsg = {\n                msgs: [\n                    new MsgSend(connectedWallet.walletAddress, recipient, {\n                        axpla: amount\n                    }),\n                ],\n            };\n            const tx = await connectedWallet.post(transactionMsg);\n            if (tx.success) {\n                setLoading(true);\n                setTxResult(tx);\n            }\n            else setTxError("Please Retry Send!");\n        } catch (error) {\n            if (error instanceof UserDenied) {\n                setTxError("User Denied");\n            } else {\n                setTxError("Unknown Error: " + error instanceof Error ? error.message : String(error));\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (txResult && loading !== 0) {\n            const timer = setTimeout(async () => {\n                try {\n                    const txInfo = await lcd.tx.txInfo(txResult.result.txhash);\n                    if (txInfo.txhash) setLoading(0);\n                } catch (err) {\n                    setLoading(loading + 1);\n                }\n            }, 1000);\n            return () => clearTimeout(timer);\n        }\n    }, [loading]);\n\n    return <div className="example-container">\n        {status === WalletStatus.WALLET_NOT_CONNECTED ? (\n            <>\n                <button\n                    className="button-css width-full"\n                    type="button"\n                    onClick={() => connect()}\n                >\n                    Connect Wallet\n                </button>\n                <p className="warning">If there is no change even after clicking the button, please press the refresh button in the bottom right corner of the screen.</p>\n            </>\n        ) : (\n            <>\n                <div className="info-container">\n                    <div className="info-title">Connected Address</div>\n                    <div className="info-content">\n                        {wallets.length === 0 ? "Loading..." : wallets[0].xplaAddress}\n                    </div>\n                </div>\n                <div className="info-container">\n                    <label className="info-title" for="recipient">\n                        Recipient\n                    </label>\n                    <input\n                        className="info-content"\n                        id="recipient"\n                        autoComplete="off"\n                        type="text"\n                        placeholder="xpla1cwduqw0z8y66mnfpev2mvrzzzu98tuexepmwrk"\n                        onChange={(e) => setRecipient(e.target.value)}\n                    />\n                </div>\n                <div className="info-container">\n                    <label className="info-title" for="amount">\n                        Amount (aXPLA)\n                    </label>\n                    <input\n                        className="info-content"\n                        autoComplete="off"\n                        id="Amount"\n                        placeholder="1"\n                        onChange={(e) => setAmount(e.target.value)}\n                    />\n                </div>\n                <div className="bottom-button-container">\n                    <button className="button-css" type="button" onClick={handleSend}>\n                        Send Tx\n                    </button>\n                    <button className="button-css" type="button" onClick={disconnect}>\n                        Disconnect\n                    </button>\n                </div>\n                {txResult && (\n                    <div style={{ marginTop: 20 }}>\n                        <div className="info-title">Send Transaction Hash</div>\n                        <div className="info-content">\n                            {\n                                loading !== 0 ?\n                                    <span>Loading...</span>\n                                    :\n                                    <a\n                                        className="link"\n                                        href={"https://explorer.xpla.io/" + network.name + "/tx/" + txResult.result.txhash}\n                                        target="_blank"\n                                        rel="noreferrer"\n                                    >\n                                        {txResult.result.txhash}\n                                    </a>\n                            }\n                        </div>\n                    </div>\n                )}\n                {txError && (\n                    <div style={{ marginTop: 20 }}>\n                        <div className="info-title">Tx Error</div>\n                        <div className="info-content">\n                            <span>\n                                {txError}\n                            </span>\n                        </div>\n                    </div>\n                )}\n            </>\n        )}\n    </div>\n}';function c(){return o.createElement(s.Z,{className:"text-[12px]",language:"jsx",title:"src/App.js",showLineNumbers:!0},i)}const d='import React from "react";\nimport { createRoot } from "react-dom/client";\nimport "./index.css";\nimport {\n    getChainOptions,\n    WalletProvider,\n} from "@xpla/wallet-provider";\nimport App from "./App";\n\nconst root = createRoot(document.getElementById(\'root\'));\ngetChainOptions().then((chainOptions) => {\n    root.render(\n        <WalletProvider {...chainOptions}>\n            <App />\n        </WalletProvider>\n    );\n});';function p(){return o.createElement(s.Z,{className:"text-[12px]",language:"jsx",title:"src/index.js",showLineNumbers:!0},d)}const u=".example-container {\n    box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);\n    border-radius: 4px;\n    padding: 24px 32px 24px 32px;\n    margin-bottom: 32px;\n}\n\n.width-full {\n    width: 100%;\n}\n\n.button-css {\n    background-color: #00B1FF;\n    color: white;\n    font-weight: 600;\n    padding: 8px 16px 8px 16px;\n    font-size: 16px;\n    border: 0px;\n    border-radius: 8px;\n}\n\n.button-css:hover {\n    cursor: pointer;\n    opacity: 0.9;\n}\n\n.info-container {\n    margin-bottom: 32px;\n}\n\n.info-title {\n    display: block;\n    color: #16161A;\n    font-size: 16px;\n    font-weight: 600;\n    margin-bottom: 8px;\n}\n\n.info-content {\n    box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);\n    border-radius: 4px;\n    width: calc(100% - 24px);\n    padding: 8px 12px 8px 12px;\n    font-size: 14px;\n}\n\n.bottom-button-container {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n}\n\n.link {\n    color: #00B1FF;\n    word-break: break-all;\n}\n\n.link:hover {\n    color: #00B1FF;\n}\n\n.warning {\n    color: #FF335F;\n}";function m(){return o.createElement(s.Z,{className:"text-[12px]",language:"css",title:"src/index.css",showLineNumbers:!0},u)}const h=()=>{const e={"App.js":i,"index.js":d,"index.css":u};return o.createElement(r.xR,{theme:"light",template:"react",customSetup:{dependencies:{"@xpla/xpla.js":"^0.3.1","@xpla/wallet-provider":"^0.4.1","react-scripts":"^4.0.3"}},options:{visibleFiles:["App.js","/package.json","index.js","index.css"],editorHeight:600,showTabs:!0,showLineNumbers:!0},files:e})};var g=n(61497),x=n(51007);const f={sidebar_position:3},k="Connect React with XPLA Vault Wallet via Wallet Provider",v={unversionedId:"tutorial/deep-understand-xpla/walletprovider",id:"tutorial/deep-understand-xpla/walletprovider",title:"Connect React with XPLA Vault Wallet via Wallet Provider",description:"XPLA Wallet Provider is a tool in React that helps you utilize the XPLA Vault wallet. This makes it easier for users to use their Vault wallet within a React web application. Let's dive into using Wallet Provider directly in a React web app.",source:"@site/startlearning/3-tutorial/3-deep-understand-xpla/3-walletprovider.mdx",sourceDirName:"3-tutorial/3-deep-understand-xpla",slug:"/tutorial/deep-understand-xpla/walletprovider",permalink:"/xpla-academy-dev/startlearning/tutorial/deep-understand-xpla/walletprovider",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Decode Account Number and Sequence in Transactions",permalink:"/xpla-academy-dev/startlearning/tutorial/deep-understand-xpla/account-sequence"},next:{title:"Write and Build Cosmwasm Contracts",permalink:"/xpla-academy-dev/startlearning/tutorial/deep-understand-xpla/write-contract"}},w={},b=[{value:"Preview",id:"preview",level:2},{value:"React Code Along",id:"react-code-along",level:2},{value:"App.js Code Analysis",id:"appjs-code-analysis",level:2},{value:"Line 16~24",id:"line16-24",level:3},{value:"Line 72~83",id:"line72-83",level:3},{value:"Line 91~123",id:"line91-123",level:3},{value:"Line 33~55",id:"line33-55",level:3},{value:"Line 57~69",id:"line57-69",level:3},{value:"Line 124~143",id:"line124-143",level:3}],N={toc:b},y="wrapper";function C(e){let{components:t,...n}=e;return(0,l.kt)(y,(0,a.Z)({},N,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"connect-react-with-xpla-vault-wallet-via-wallet-provider"},"Connect React with XPLA Vault Wallet via Wallet Provider"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/xpladev/wallet-provider"},"XPLA Wallet Provider")," is a tool in React that helps you utilize the XPLA Vault wallet. This makes it easier for users to use their Vault wallet within a React web application. Let's dive into using Wallet Provider directly in a React web app."),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"You can also find information about XPLA Wallet Provider in the ",(0,l.kt)("a",{parentName:"p",href:"https://docs.xpla.io/develop/develop/tools/wallet-provider/"},"XPLA Docs"),".")),(0,l.kt)("admonition",{type:"danger"},(0,l.kt)("p",{parentName:"admonition"},"In the Edge browser, you cannot connect to the Vault Chrome Extension using Wallet Provider. Instead, you can install the mobile application Vault and establish a connection using the ",(0,l.kt)("a",{parentName:"p",href:"https://walletconnect.com/"},"Wallet Connect")," method.")),(0,l.kt)("h2",{id:"preview"},"Preview"),(0,l.kt)("p",null,"Below is the code to connect a Vault wallet using Wallet Provider in React. Click the Connect button below and try sending testnet $XPLA. "),(0,l.kt)(h,{mdxType:"WalletProvider"}),(0,l.kt)("br",null),(0,l.kt)("p",null,"We were able to receive the user's Vault wallet information through Wallet Provider and complete the process of sending testnet $XPLA. If you've understood the Preview Code, you're ready to move on to the ",(0,l.kt)("a",{parentName:"p",href:"/startlearning/tutorial/deep-understand-xpla/write-contract"},"next step"),"."),(0,l.kt)("h2",{id:"react-code-along"},"React Code Along"),(0,l.kt)("p",null,"Let's follow the steps below to understand and work with the Preview Code:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Start by setting up React using CRA."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"npx create-react-app xpla-app\ncd xpla-app\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Install the necessary module for using Wallet Provider. Since Wallet Provider uses a ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Glossary/Polyfill"},"Polyfill"),", make sure to install ",(0,l.kt)("inlineCode",{parentName:"p"},"react-scripts@4.0.3")," as well."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"npm install react-scripts@4.0.3\nnpm install @xpla/wallet-provider @xpla/xpla.js\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Modify the src/index.js file in your React project installed with CRA, as shown in the example."),(0,l.kt)(p,{mdxType:"CodeWPIndex"})),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Edit the src/App.js file."),(0,l.kt)(c,{mdxType:"CodeWPApp"})),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Make changes to the src/index.css file."),(0,l.kt)(m,{mdxType:"CodeWPCss"})),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Run React locally."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"npm start\n")))),(0,l.kt)("p",null,"After this, you can access the Vault wallet connection like in the preview by visiting ",(0,l.kt)("inlineCode",{parentName:"p"},"localhost:3000")," in your browser. Try sending testnet $XPLA directly."),(0,l.kt)("h2",{id:"appjs-code-analysis"},"App.js Code Analysis"),(0,l.kt)("p",null,"Let's analyze the code in the App.js file, which directly uses the Wallet Provider."),(0,l.kt)("h3",{id:"line16-24"},"Line 16~24"),(0,l.kt)("p",null,"We've used the ",(0,l.kt)("strong",{parentName:"p"},"useWallet")," and ",(0,l.kt)("strong",{parentName:"p"},"useConnectedWallet")," functions from the ",(0,l.kt)("inlineCode",{parentName:"p"},"@xpla/wallet-provider")," module. The ",(0,l.kt)("strong",{parentName:"p"},"status")," variable indicates whether the user is connected to the Vault Chrome Extension. If the user's wallet is not connected, the ",(0,l.kt)("strong",{parentName:"p"},"connectedWallet")," variable holds an ",(0,l.kt)("inlineCode",{parentName:"p"},"undefined")," value."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js",metastring:"{2}","{2}":!0},"const {\n    status,\n    network,\n    wallets,\n    connect,\n    disconnect\n} = useWallet();\n\nconst connectedWallet = useConnectedWallet();\n")),(0,l.kt)("h3",{id:"line72-83"},"Line 72~83"),(0,l.kt)("p",null,"When the user hasn't connected their Vault wallet yet (",(0,l.kt)("strong",{parentName:"p"},"status === WalletStatus.WALLET_NOT_CONNECTED"),"), we display the ",(0,l.kt)("inlineCode",{parentName:"p"},"Connect Wallet")," button. Clicking this button triggers the ",(0,l.kt)("strong",{parentName:"p"},"connect")," function. This function, an embedded feature of the ",(0,l.kt)("inlineCode",{parentName:"p"},"@xpla/wallet-provider")," module, opens a modal window to connect to the Vault."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js",metastring:"{1,6}","{1,6}":!0},'{status === WalletStatus.WALLET_NOT_CONNECTED ? (\n    <>\n        <button\n            className="button-css width-full"\n            type="button"\n            onClick={() => connect()}\n        >\n            Connect Wallet\n        </button>\n        <p className="warning">If there is no change even after clicking the button, please press the refresh button in the bottom right corner of the screen.</p>\n    </>\n) : (\n')),(0,l.kt)("br",null),(0,l.kt)("p",null,"When the user connects their wallet, the address information they're using in the Vault is stored in the ",(0,l.kt)("strong",{parentName:"p"},"connectedWallet")," variable. Users can switch wallet addresses using the ",(0,l.kt)("inlineCode",{parentName:"p"},"Switch wallet")," button in the Vault."),(0,l.kt)(x.Z,{url:"google.com",bodyStyle:{padding:"0px 0px 16px 0px",position:"relative"},mdxType:"BrowserWindow"},(0,l.kt)("div",{className:"flex justify-center",style:{width:"100%",height:"100%",top:0,zIndex:0,position:"absolute"}},(0,l.kt)("img",{style:{height:"100%"},src:"/img/2-settings/1-create-wallet/google.png"})),(0,l.kt)("div",{className:"flex justify-end",style:{zIndex:1,position:"relative"}},(0,l.kt)(g.Z,{imgSrc:"/img/3-tutorial/3-deep-understand-xpla/vault-switch-wallet.png",mdxType:"VaultImgCard"}))),(0,l.kt)("h3",{id:"line91-123"},"Line 91~123"),(0,l.kt)("p",null,"In the example React interface, we take Recipient and Amount as input values. Clicking the ",(0,l.kt)("inlineCode",{parentName:"p"},"Send Tx")," button triggers the ",(0,l.kt)("strong",{parentName:"p"},"handleSend")," function."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js",metastring:"{3,16,27}","{3,16,27}":!0},'<div className="info-container">\n    <label className="info-title" for="recipient">\n        Recipient\n    </label>\n    <input\n        className="info-content"\n        id="recipient"\n        autoComplete="off"\n        type="text"\n        placeholder="xpla1cwduqw0z8y66mnfpev2mvrzzzu98tuexepmwrk"\n        onChange={(e) => setRecipient(e.target.value)}\n    />\n</div>\n<div className="info-container">\n    <label className="info-title" for="amount">\n        Amount (aXPLA)\n    </label>\n    <input\n        className="info-content"\n        autoComplete="off"\n        id="Amount"\n        placeholder="1"\n        onChange={(e) => setAmount(e.target.value)}\n    />\n</div>\n<div className="bottom-button-container">\n    <button className="button-css" type="button" onClick={handleSend}>\n        Send Tx\n    </button>\n    <button className="button-css" type="button" onClick={disconnect}>\n        Disconnect\n    </button>\n</div>\n')),(0,l.kt)("h3",{id:"line33-55"},"Line 33~55"),(0,l.kt)("p",null,"The ",(0,l.kt)("strong",{parentName:"p"},"handleSend")," function sends testnet $XPLA from the user's connected wallet to the recipient's wallet, based on the amount (aXPLA) entered. It creates a transaction message at line 35 and broadcasts the transaction to the blockchain network at line 42."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js",metastring:"{3,10}","{3,10}":!0},'const handleSend = async () => {\n    try {\n        const transactionMsg = {\n            msgs: [\n                new MsgSend(connectedWallet.walletAddress, recipient, {\n                    axpla: amount\n                }),\n            ],\n        };\n        const tx = await connectedWallet.post(transactionMsg);\n        if (tx.success) {\n            setLoading(true);\n            setTxResult(tx);\n        }\n        else setTxError("Please Retry Send!");\n    } catch (error) {\n        if (error instanceof UserDenied) {\n            setTxError("User Denied");\n        } else {\n            setTxError("Unknown Error: " + error instanceof Error ? error.message : String(error));\n        }\n    }\n};\n')),(0,l.kt)("h3",{id:"line57-69"},"Line 57~69"),(0,l.kt)("p",null,"In the XPLA blockchain, blocks are generated about every 6 seconds. So, after propagating a transaction, it takes a bit of time for it to be recorded in the blockchain. To confirm whether the transaction is successfully recorded, the example uses the ",(0,l.kt)("inlineCode",{parentName:"p"},"LCDClient")," to check if there's a transaction corresponding to the hash value."),(0,l.kt)("p",null,"If the transaction is successfully propagated in the ",(0,l.kt)("inlineCode",{parentName:"p"},"handleSend")," function, the ",(0,l.kt)("strong",{parentName:"p"},"loading")," variable in React State changes to ",(0,l.kt)("strong",{parentName:"p"},"true")," (line 44). Since the ",(0,l.kt)("strong",{parentName:"p"},"loading")," variable is included in the ",(0,l.kt)("strong",{parentName:"p"},"dependency array")," of ",(0,l.kt)("strong",{parentName:"p"},"useEffect"),", the callback function of ",(0,l.kt)("strong",{parentName:"p"},"useEffect")," is executed. The callback function sends queries to the LCDClient every second using the ",(0,l.kt)("strong",{parentName:"p"},"setTimeout")," function until the transaction data is received."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js",metastring:"{3,5,13}","{3,5,13}":!0},"useEffect(() => {\n    if (txResult && loading !== 0) {\n        const timer = setTimeout(async () => {\n            try {\n                const txInfo = await lcd.tx.txInfo(txResult.result.txhash);\n                if (txInfo.txhash) setLoading(0);\n            } catch (err) {\n                setLoading(loading + 1);\n            }\n        }, 1000);\n        return () => clearTimeout(timer);\n    }\n}, [loading]);\n")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"The method of retrieving transaction data using LCDClient is an application of what you learned in the ",(0,l.kt)("a",{parentName:"p",href:"/startlearning/settings/create-testnet-transaction/send-query"},"previous step"),".")),(0,l.kt)("h3",{id:"line124-143"},"Line 124~143"),(0,l.kt)("p",null,"Once the transaction data is received and the ",(0,l.kt)("strong",{parentName:"p"},"loading")," variable becomes 0, the React interface displays the transaction hash value to the user. Clicking the hash value links to the ",(0,l.kt)("a",{parentName:"p",href:"https://explorer.xpla.io/"},"XPLA Explorer"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js",metastring:"{11}","{11}":!0},'{txResult && (\n    <div style={{ marginTop: 20 }}>\n        <div className="info-title">Send Transaction Hash</div>\n        <div className="info-content">\n            {\n                loading !== 0 ?\n                    <span>Loading...</span>\n                    :\n                    <a\n                        className="link"\n                        href={"https://explorer.xpla.io/" + network.name + "/tx/" + txResult.result.txhash}\n                        target="_blank"\n                        rel="noreferrer"\n                    >\n                        {txResult.result.txhash}\n                    </a>\n            }\n        </div>\n    </div>\n)}\n')),(0,l.kt)("p",null,"So far, we've explored using the ",(0,l.kt)("inlineCode",{parentName:"p"},"@xpla/wallet-provider")," module in React. We've connected the user's Vault wallet information to React and successfully sent testnet $XPLA. Customize the example code to suit your game and make it easy for users to interact with the blockchain."))}C.isMDXComponent=!0}}]);