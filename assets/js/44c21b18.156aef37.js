"use strict";(self.webpackChunkxpla_academy=self.webpackChunkxpla_academy||[]).push([[4536],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>u});var n=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(a),m=o,u=d["".concat(s,".").concat(m)]||d[m]||h[m]||l;return a?n.createElement(u,r(r({ref:t},c),{},{components:a})):n.createElement(u,r({ref:t},c))}));function u(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=a.length,r=new Array(l);r[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:o,r[1]=i;for(var p=2;p<l;p++)r[p]=a[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},34673:(e,t,a)=>{a.d(t,{Z:()=>u});var n=a(87462),o=a(67294),l=a(86010),r=a(72389),i=a(86043);const s={details:"details_lb9f",isBrowser:"isBrowser_bmU9",collapsibleContent:"collapsibleContent_i85q"};function p(e){return!!e&&("SUMMARY"===e.tagName||p(e.parentElement))}function c(e,t){return!!e&&(e===t||c(e.parentElement,t))}function d(e){let{summary:t,children:a,...d}=e;const h=(0,r.Z)(),m=(0,o.useRef)(null),{collapsed:u,setCollapsed:k}=(0,i.u)({initialState:!d.open}),[g,f]=(0,o.useState)(d.open),N=o.isValidElement(t)?t:o.createElement("summary",null,t??"Details");return o.createElement("details",(0,n.Z)({},d,{ref:m,open:g,"data-collapsed":u,className:(0,l.Z)(s.details,h&&s.isBrowser,d.className),onMouseDown:e=>{p(e.target)&&e.detail>1&&e.preventDefault()},onClick:e=>{e.stopPropagation();const t=e.target;p(t)&&c(t,m.current)&&(e.preventDefault(),u?(k(!1),f(!0)):k(!0))}}),N,o.createElement(i.z,{lazy:!1,collapsed:u,disableSSRStyle:!0,onCollapseTransitionEnd:e=>{k(e),f(!e)}},o.createElement("div",{className:s.collapsibleContent},a)))}const h={details:"details_b_Ee"},m="alert alert--info";function u(e){let{...t}=e;return o.createElement(d,(0,n.Z)({},t,{className:(0,l.Z)(m,h.details,t.className)}))}},51007:(e,t,a)=>{a.d(t,{Z:()=>r});var n=a(67294),o=a(86010);const l={browserWindow:"browserWindow_my1Q",browserWindowHeader:"browserWindowHeader_jXSR",row:"row_KZDM",buttons:"buttons_uHc7",right:"right_oyze",browserWindowAddressBar:"browserWindowAddressBar_Pd8y",dot:"dot_giz1",browserWindowMenuIcon:"browserWindowMenuIcon_Vhuh",bar:"bar_rrRL",browserWindowBody:"browserWindowBody_Idgs"};function r(e){let{children:t,minHeight:a,url:r="http://localhost:3000",style:i,bodyStyle:s}=e;return n.createElement("div",{className:l.browserWindow,style:{...i,minHeight:a}},n.createElement("div",{className:l.browserWindowHeader},n.createElement("div",{className:l.buttons},n.createElement("span",{className:l.dot,style:{background:"#f25f58"}}),n.createElement("span",{className:l.dot,style:{background:"#fbbe3c"}}),n.createElement("span",{className:l.dot,style:{background:"#58cb42"}})),n.createElement("div",{className:(0,o.Z)(l.browserWindowAddressBar,"text--truncate")},r),n.createElement("div",{className:l.browserWindowMenuIcon},n.createElement("div",null,n.createElement("span",{className:l.bar}),n.createElement("span",{className:l.bar}),n.createElement("span",{className:l.bar})))),n.createElement("div",{className:l.browserWindowBody,style:s},t))}},61497:(e,t,a)=>{a.d(t,{Z:()=>o});var n=a(67294);const o=e=>{let{imgSrc:t,style:a}=e;return n.createElement("img",{className:"max-w-sm",style:a,src:t,alt:""})}},9628:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>p,default:()=>k,frontMatter:()=>s,metadata:()=>c,toc:()=>h});var n=a(87462),o=(a(67294),a(3905)),l=a(34673),r=a(61497),i=a(51007);const s={sidebar_position:1},p="Run XPLA Blockchain Locally (Private)",c={unversionedId:"tutorial/deep-understand-xpla/local-network",id:"tutorial/deep-understand-xpla/local-network",title:"Run XPLA Blockchain Locally (Private)",description:"In the XPLA blockchain, there's a Public Network open for anyone to join. It's called the Mainnet(dimension37-1) and the Testnet(cube47-5). However, exclusively developing on the Public Network has its limitations. Obtaining a significant amount of $XPLA for transaction fees can be challenging, and there might be times when you don't want to generate transactions publicly.",source:"@site/startlearning/3-tutorial/3-deep-understand-xpla/1-local-network.mdx",sourceDirName:"3-tutorial/3-deep-understand-xpla",slug:"/tutorial/deep-understand-xpla/local-network",permalink:"/xpla-academy-dev/startlearning/tutorial/deep-understand-xpla/local-network",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Advanced - Dive deep into XPLA blockchain",permalink:"/xpla-academy-dev/startlearning/category/advanced---dive-deep-into-xpla-blockchain"},next:{title:"Decode Account Number and Sequence in Transactions",permalink:"/xpla-academy-dev/startlearning/tutorial/deep-understand-xpla/account-sequence"}},d={},h=[{value:"Index",id:"index",level:2},{value:"Prerequisite",id:"prerequisite",level:2},{value:"Setting Up the Local Network",id:"run-local-network",level:2},{value:"Using xplad on the Local Network",id:"use-xplad",level:2},{value:"Making Use of the RPC Network",id:"use-rpc",level:2},{value:"Exploring with Swagger",id:"use-swagger",level:2},{value:"Creating Transactions on the Local Network with Javascript",id:"use-js",level:2},{value:"Wrapping Up",id:"conclusion",level:2}],m={toc:h},u="wrapper";function k(e){let{components:t,...a}=e;return(0,o.kt)(u,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"run-xpla-blockchain-locally-private"},"Run XPLA Blockchain Locally (Private)"),(0,o.kt)("p",null,"In the XPLA blockchain, there's a Public Network open for anyone to join. It's called the ",(0,o.kt)("a",{parentName:"p",href:"https://explorer.xpla.io/"},"Mainnet(dimension_37-1)")," and the ",(0,o.kt)("a",{parentName:"p",href:"https://explorer.xpla.io/testnet/"},"Testnet(cube_47-5)"),". However, exclusively developing on the Public Network has its limitations. Obtaining a significant amount of $XPLA for transaction fees can be challenging, and there might be times when you don't want to generate transactions publicly."),(0,o.kt)("p",null,"That's why we'll delve into running the XPLA blockchain on a Local (Private) Network. You can become a Single Validator yourself, operating a blockchain node and managing the total supply of $XPLA in the network. Through the Local Network, you can develop your very own Web3 game within the XPLA blockchain."),(0,o.kt)("h2",{id:"index"},"Index"),(0,o.kt)("p",null,"We will explore Local Network in the following steps."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"/startlearning/tutorial/deep-understand-xpla/local-network#prerequisite"},"Prerequisite"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"/startlearning/tutorial/deep-understand-xpla/local-network#run-local-network"},"Setting Up the Local Network"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"/startlearning/tutorial/deep-understand-xpla/local-network#use-xplad"},"Using xplad on the Local Network"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"/startlearning/tutorial/deep-understand-xpla/local-network#use-rpc"},"Making Use of the RPC Network"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"/startlearning/tutorial/deep-understand-xpla/local-network#use-swagger"},"Exploring with Swagger"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"/startlearning/tutorial/deep-understand-xpla/local-network#use-js"},"Creating Transactions on the Local Network with Javascript")))),(0,o.kt)("h2",{id:"prerequisite"},"Prerequisite"),(0,o.kt)("p",null,"In the examples, ",(0,o.kt)("a",{parentName:"p",href:"https://www.docker.com/"},"Docker")," is used to simplify the setup of your development environment and assist in faster development. Please install ",(0,o.kt)("a",{parentName:"p",href:"https://www.docker.com/"},"Docker")," according to your operating system."),(0,o.kt)("p",null,"In this step, the key focus is on working with the Local Network, so you don't need an in-depth understanding of ",(0,o.kt)("a",{parentName:"p",href:"https://www.docker.com/"},"Docker"),". By following the steps below and entering the provided code, you can easily set up the Local Network."),(0,o.kt)("h2",{id:"run-local-network"},"Setting Up the Local Network"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create a file named ",(0,o.kt)("strong",{parentName:"p"},"Dockerfile"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Copy and paste the following code into the ",(0,o.kt)("strong",{parentName:"p"},"Dockerfile")," and save it. This ",(0,o.kt)("strong",{parentName:"p"},"Dockerfile")," streamlines the process of installing xplad. For more detailed information about xplad, refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.xpla.io/develop/develop/tools/xplad/install-xplad/"},"Docs")," or ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/xpladev/xpla"},"Github"),". "),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-dockerfile"},"########\nFROM golang:1.19 as builder\n\nRUN git clone https://github.com/xpladev/xpla.git ~/xpla \n\nRUN cd ~/xpla && \\\n    git checkout v1.2.0 && \\\n    make install && \\\n    mv /go/bin/xplad /usr/local/bin/xplad\n\nRUN cp /go/pkg/mod/github.com/!cosm!wasm/wasmvm@v1.0.0/api/libwasmvm.x86_64.so /usr/local/lib && \\\n    ldconfig\n\n########\nFROM ubuntu:22.04 AS runner\n\nRUN apt-get update && \\\n    apt-get install -y tzdata && \\\n    ln -fs /usr/share/zoneinfo/Asia/Seoul /etc/localtime && \\\n    dpkg-reconfigure --frontend noninteractive tzdata\n\nRUN apt-get update && \\\n    apt-get install -y vim bash-completion wget sysstat dstat net-tools curl tmux jq dnsutils liblz4-tool pv git\n\nRUN curl -fsSL https://deb.nodesource.com/setup_16.x | bash - && \\\n    apt-get install -y nodejs\n\nCOPY --from=builder /usr/local/bin/xplad /usr/local/bin/\nCOPY --from=builder /usr/local/lib/libwasmvm.x86_64.so /usr/local/lib/\nRUN ldconfig\n")))),(0,o.kt)("br",null),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Building the ",(0,o.kt)("strong",{parentName:"p"},"Dockerfile")," will create a container image, and this might take some time to build."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker build -t my-xpla-node .\n")),(0,o.kt)("p",{parentName:"li"},"Enter the ",(0,o.kt)("inlineCode",{parentName:"p"},"docker image ls")," command to check whether the container image was successfully created."))),(0,o.kt)("br",null),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create a docker container using the generated container image."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -it -d --name myXPLANode -p 26657:26657 -p 1317:1317 my-xpla-node\n")),(0,o.kt)("p",{parentName:"li"},"While building the Local Network, we will also use the LCDClient and RPC networks. Since the LCDClient environment uses 1317 Port and the RPC network uses 26657 Port, each port was also opened. Afterwards, enter the ",(0,o.kt)("inlineCode",{parentName:"p"},"docker ps -a")," command to check if the docker container was created successfully."))),(0,o.kt)("br",null),(0,o.kt)("ol",{start:5},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Access the docker container via bash."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker exec -it myXPLANode bash\n")),(0,o.kt)("admonition",{parentName:"li",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"To exit the bash in the connected container, simply type ",(0,o.kt)("inlineCode",{parentName:"p"},"exit"),". If you want to access the container again, use the command ",(0,o.kt)("inlineCode",{parentName:"p"},"docker exec -it myXPLANode bash"),". If the container isn't running, try ",(0,o.kt)("inlineCode",{parentName:"p"},"docker start myXPLANode && docker exec -it myXPLANode bash"),"."),(0,o.kt)("p",{parentName:"admonition"},"If you happen to miss a step while following the example, there's an option to reset by deleting and recreating the container. You can remove the container using the command ",(0,o.kt)("inlineCode",{parentName:"p"},"docker stop myXPLANode && docker rm myXPLANode")," and then proceed again from Step 4.")))),(0,o.kt)("br",null),(0,o.kt)("ol",{start:6},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"In the docker container's bash environment, input the following command. Similar to Mainnet's chain-id being ",(0,o.kt)("inlineCode",{parentName:"p"},"dimension_37-1"),", in the example's Local Network, the chain-id is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"localnet_1-1"),". The variable ",(0,o.kt)("strong",{parentName:"p"},"yourMonikerName")," refers to the name of the node you're operating. Please input the desired name."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"xplad init --chain-id=localnet_1-1 yourMonikerName\n")),(0,o.kt)("p",{parentName:"li"},"Upon inputting the above command, a ",(0,o.kt)("inlineCode",{parentName:"p"},".xpla")," folder will be created in the home directory (~), initializing the Genesis file."),(0,o.kt)("p",{parentName:"li"},"The structure of the ",(0,o.kt)("inlineCode",{parentName:"p"},"~/.xpla")," folder is as follows."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},".                                           # ~/.xpla\n|- data                                     # Contains the databases used by the node.\n\u2514- config/\n    \u2502-- app.toml                            # xplad configuration file\n    \u2502-- client.toml                         # configurations for the cli wallet (ex xplacli)\n    \u2502-- config.toml                         # Tendermint configuration  file\n    \u2502-- genesis.json                        # genesis transactions\n    \u2502-- node_key.json                       # private key used for node authentication in the p2p protocol (its corresponding public key is the nodeid)\n    \u2514-- priv_validator_key.json             # key used by the validator on the node to sign blocks\n")),(0,o.kt)(l.Z,{summary:"What is a Genesis File?",mdxType:"Details"},(0,o.kt)("p",{parentName:"li"},"In the world of blockchain, the very first block that's created is called the Genesis block. The Genesis file is the record where all the data for this first block is stored. Every node participating in the same blockchain network needs to start block generation with the same Genesis file. As a result, right from the first block, they all share the same data, and the block hash values among nodes match."),(0,o.kt)("p",{parentName:"li"},"Both ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/xpladev/mainnet/tree/main/dimension_37-1"},"Mainnet")," and ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/xpladev/testnets/tree/main/cube_47-5"},"Testnet")," have their own Genesis files, and you can find them on Github. If you use the same Genesis file as the Mainnet, you can operate a ",(0,o.kt)("a",{parentName:"p",href:"https://docs.xpla.io/full-node/full-node/run-a-full-node/overview/"},"Mainnet Full Node (a node storing all information of the blockchain)"),". For detailed instructions on running Full Nodes for both Mainnet and Testnet, refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.xpla.io/full-node/full-node/run-a-full-node/join-a-network/#join-a-public-network"},"Docs"),"."),(0,o.kt)("p",{parentName:"li"},"In this example, we're not dealing with Mainnet or Testnet but instead operating a Local Network. This is why we'll create a Genesis file directly.")))),(0,o.kt)("br",null),(0,o.kt)("ol",{start:7},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Generate a wallet to use as a Validator in the Local Network blockchain. Similar to the previous step, you're creating a wallet with the same command. "),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"xplad keys add yourAccount\n")),(0,o.kt)("p",{parentName:"li"},"Make sure to enter the Passphrase correctly and store it along with your mnemonic. You'll need to input the Passphrase each time you use your wallet information."))),(0,o.kt)("br",null),(0,o.kt)("ol",{start:8},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Record the information that the created wallet will receive 100000000000000000000axpla (100 XPLA) in the ",(0,o.kt)("inlineCode",{parentName:"p"},"~/.xpla/config/genesis.json")," file."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"xplad add-genesis-account $(xplad keys show yourAccount -a) 100000000000000000000axpla\n")),(0,o.kt)("p",{parentName:"li"},"In the following Step 11, we'll set the ",(0,o.kt)("inlineCode",{parentName:"p"},"inflation")," value to 0. This means that if we allocate 100 XPLA to one wallet in the Genesis block, the total supply of $XPLA in the Local Network will remain fixed at 100 XPLA. You're free to adjust the value of 100000000000000000000axpla to increase the amount of $XPLA available for use."))),(0,o.kt)("br",null),(0,o.kt)("ol",{start:9},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Register the created wallet as a Validator. The initial 10000000000000000000axpla (10 XPLA) is the amount you'll Self-Delegate when registering as a Validator. "),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"xplad gentx yourAccount 10000000000000000000axpla --chain-id=localnet_1-1\nxplad collect-gentxs \n")),(0,o.kt)("p",{parentName:"li"},"When you enter the first command, a ",(0,o.kt)("inlineCode",{parentName:"p"},"gentx")," folder will be created in ",(0,o.kt)("inlineCode",{parentName:"p"},"~/.xpla/config"),". Entering the second command will apply the contents of the ",(0,o.kt)("inlineCode",{parentName:"p"},"gentx")," folder to the ",(0,o.kt)("inlineCode",{parentName:"p"},"genesis.json")," file"),(0,o.kt)(l.Z,{summary:"What is a Delegate?",mdxType:"Details"},(0,o.kt)("p",{parentName:"li"},"The act of entrusting a certain amount of XPLA to a validator is called Delegate, and the person who entrusted it is called Delegator. In the Proof of State (PoS) type of XPLA blockchain, validators earn fees through block creation. Delegators can earn the fees that validators earn from block creation equal to the percentage of XPLA they each delegated."),(0,o.kt)("p",{parentName:"li"},"How often validators will create blocks is determined by the total amount of XPLA delegated to them. The higher the weight, the higher the block creation rate. For more details, see ",(0,o.kt)("a",{parentName:"p",href:"https://docs.xpla.io/full-node/full-node/manage-a-validator/validator-faq/#what-is-staking"},"Docs"),".")))),(0,o.kt)("br",null),(0,o.kt)("ol",{start:10},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Currently, the ",(0,o.kt)("inlineCode",{parentName:"p"},"genesis.json")," file has a non-zero ",(0,o.kt)("inlineCode",{parentName:"p"},"inflation")," value. We'll change it to 0 to keep the total supply fixed without inflation. The actual XPLA blockchain Mainnet also has an ",(0,o.kt)("inlineCode",{parentName:"p"},"inflation")," value of 0. You can find related information in the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/xpladev/mainnet/blob/main/dimension_37-1/genesis.json#L947"},"genesis file")," and ",(0,o.kt)("a",{parentName:"p",href:"https://explorer.xpla.io/mainnet/chaininfo"},"Explorer"),". Details about the genesis file parameters can be found in the ",(0,o.kt)("a",{parentName:"p",href:"https://hub.cosmos.network/main/resources/genesis.html#mint"},"Cosmos documentation"),"."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'sed -i "291s/0.130000000000000000/0.000000000000000000/g" ~/.xpla/config/genesis.json\nsed -i "296s/0.130000000000000000/0.000000000000000000/g" ~/.xpla/config/genesis.json\nsed -i "297s/0.200000000000000000/0.000000000000000000/g" ~/.xpla/config/genesis.json\nsed -i "298s/0.070000000000000000/0.000000000000000000/g" ~/.xpla/config/genesis.json\n')))),(0,o.kt)("br",null),(0,o.kt)("ol",{start:11},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Presently, the coin denomination in the ",(0,o.kt)("inlineCode",{parentName:"p"},"genesis.json file"),' is set as "stake". Since the XPLA blockchain uses "axpla" as its coin denomination, we\'ll adjust it.'),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'sed -i "s/"stake"/"axpla"/g" ~/.xpla/config/genesis.json\n')))),(0,o.kt)("br",null),(0,o.kt)("ol",{start:12},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Modify the ",(0,o.kt)("inlineCode",{parentName:"p"},"app.toml")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"config.toml")," files to configure the LCDClient environment and RPC network connection. "),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'sed -i "112s/.*/enable = true/g" ~/.xpla/config/app.toml\nsed -i "115s/.*/swagger = true/g" ~/.xpla/config/app.toml\nsed -i "91s/127.0.0.1/0.0.0.0/g" ~/.xpla/config/config.toml\n')),(0,o.kt)("p",{parentName:"li"},"Modify the app.toml and config.toml files to configure the LCDClient environment and RPC network connection. "))),(0,o.kt)("br",null),(0,o.kt)("ol",{start:13},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Initialize the blockchain database according to the state set in the Genesis file."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"xplad tendermint unsafe-reset-all\n")))),(0,o.kt)("br",null),(0,o.kt)("ol",{start:14},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Use the command below to run the XPLA blockchain Local Network as a background process."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"xplad start &>/dev/null &\n")),(0,o.kt)("p",{parentName:"li"},"If you'd like to check whether the background process is functioning properly, input ",(0,o.kt)("inlineCode",{parentName:"p"},"ps -A"),"."),(0,o.kt)("p",{parentName:"li"},"If you'd rather observe the process instead of running it in the background, omit ",(0,o.kt)("inlineCode",{parentName:"p"},"&>/dev/null &")," and input ",(0,o.kt)("inlineCode",{parentName:"p"},"xplad start")," only."))),(0,o.kt)("br",null),(0,o.kt)("ol",{start:15},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Local Network setup is now complete! Use the command below to inspect the information of the running Local Network."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"xplad status\n")),(0,o.kt)("p",{parentName:"li"},"If it's running well, you should roughly see an output similar to the following. "),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:"{22}","{22}":!0},'{\n    "NodeInfo": {\n        "protocol_version": {\n            "p2p": "8",\n            "block": "11",\n            "app": "0"\n        },\n        "id": "a6c8fcd8951c4697c893976ebd9a456e1dbd4faa",\n        "listen_addr": "tcp://0.0.0.0:26656",\n        "network": "localnet_1-1",\n        "version": "v0.34.21",\n        "channels": "40202122233038606100",\n        "moniker": "yourMonikerName",\n        "other": {\n            "tx_index": "on",\n            "rpc_address": "tcp://0.0.0.0:26657"\n        }\n    },\n    "SyncInfo": {\n        "latest_block_hash": "92A29DB190CF19A193E7009CFFD2A97CF450A3304D87C85C916B895515113602",\n        "latest_app_hash": "D7E013D16B47901104F3DFFCE05861E291DB98C31617155C7BCBEB8F7E2D1D02",\n        "latest_block_height": "43441",\n        "latest_block_time": "2023-08-07T02:39:05.4921575Z",\n        "earliest_block_hash": "E3118D0BE4CD0D437843A03EB86B5B6A1B8BC0749392BB44ED32B113BAFE20F7",\n        "earliest_app_hash": "E3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855",\n        "earliest_block_height": "1",\n        "earliest_block_time": "2023-08-04T10:16:10.850891Z",\n        "catching_up": false\n    },\n    "ValidatorInfo": {\n        "Address": "BAE5CC7C2FB6467D0FA66BCEB01C6C8F470B0E8A",\n        "PubKey": {\n            "type": "tendermint/PubKeyEd25519",\n            "value": "LyDR9u73BNZ+338l5L02FLi40HZ6cvqHhf5skPWVfHo="\n        },\n        "VotingPower": "10"\n    }\n}\n')),(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("strong",{parentName:"p"},"SyncInfo.latest_block_height")," value indicates the height of the latest block. This value will increase each time you execute the ",(0,o.kt)("inlineCode",{parentName:"p"},"xplad status")," command. This suggests that blocks are successfully being added to the blockchain."))),(0,o.kt)("h2",{id:"use-xplad"},"Using xplad on the Local Network"),(0,o.kt)("p",null,"Let's try using xplad in the container's bash environment."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Check Balance"),(0,o.kt)("p",{parentName:"li"},"The XPLA blockchain is up and running on the Local Network. Let's start by checking the balance of the wallet created for the Validator. "),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"xplad query bank balances $(xplad keys show yourAccount -a)\n")),(0,o.kt)("p",{parentName:"li"},"When you input the above command, you'll see results like the following. "),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'Enter keyring passphrase:\nbalances:\n- amount: "90000000000000000000"\ndenom: axpla\npagination:\nnext_key: null\ntotal: "0"\n')),(0,o.kt)("p",{parentName:"li"},"100 XPLA were initially supplied in the Genesis block, and 10 XPLA were self-delegated when registering as a Validator. Therefore, having 90 XPLA left is normal."))),(0,o.kt)("br",null),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Check Delegated Amount"),(0,o.kt)("p",{parentName:"li"},"When registering as a Validator, 10 XPLA were self-delegated. Let's check this using xplad."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"xplad query staking delegations $(xplad keys show yourAccount -a)\n")),(0,o.kt)("p",{parentName:"li"},"You'll get results similar to the following. 10 XPLA were self-delegated."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'Enter keyring passphrase:\ndelegation_responses:\n- balance:\n    amount: "10000000000000000000"\n    denom: axpla\ndelegation:\n    delegator_address: xpla1mcvhqcnjwry046rcys68hrvvefq7zvyve2tjwz\n    shares: "10000000000000000000.000000000000000000"\n    validator_address: xplavaloper1mcvhqcnjwry046rcys68hrvvefq7zvyvghggpl\npagination:\nnext_key: null\ntotal: "0"\n')))),(0,o.kt)("br",null),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create a Transfer Transaction"),(0,o.kt)("p",{parentName:"li"},"Let's generate the first transaction on the Local Network. In this example, we'll create a transaction where a Validator wallet sends 1axpla to itself. You can try creating transactions transferring to other wallets you create. "),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"xplad tx bank send $(xplad keys show yourAccount -a) $(xplad keys show yourAccount -a) 1axpla --chain-id=localnet_1-1\n")),(0,o.kt)("p",{parentName:"li"},"You'll get results like this. The transaction hash is ",(0,o.kt)("inlineCode",{parentName:"p"},"F8B522E28918C6616136C1B1C70D3B5972F06CA8E80D9BD60B6B19704BC85E5C"),"."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'Enter keyring passphrase:\nEnter keyring passphrase:\nEnter keyring passphrase:\n{"body":{"messages":[{"@type":"/cosmos.bank.v1beta1.MsgSend","from_address":"xpla1mcvhqcnjwry046rcys68hrvvefq7zvyve2tjwz","to_address":"xpla1mcvhqcnjwry046rcys68hrvvefq7zvyve2tjwz","amount":[{"denom":"axpla","amount":"1"}]}],"memo":"","timeout_height":"0","extension_options":[],"non_critical_extension_options":[]},"auth_info":{"signer_infos":[],"fee":{"amount":[],"gas_limit":"200000","payer":"","granter":""}},"signatures":[]}\n\nconfirm transaction before signing and broadcasting [y/N]: y\ncode: 0\ncodespace: ""\ndata: ""\nevents: []\ngas_used: "0"\ngas_wanted: "0"\nheight: "0"\ninfo: ""\nlogs: []\nraw_log: \'[]\'\ntimestamp: ""\ntx: null\ntxhash: F8B522E28918C6616136C1B1C70D3B5972F06CA8E80D9BD60B6B19704BC85E5C\n')))),(0,o.kt)("br",null),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Send a Transaction Query"),(0,o.kt)("p",{parentName:"li"},"Let's send a query to the blockchain using xplad to retrieve the data of the transaction we created earlier. Replace the transaction hash with the one you generated. For example, the command for the example transaction would be ",(0,o.kt)("inlineCode",{parentName:"p"},"xplad query tx F8B522E28918C6616136C1B1C70D3B5972F06CA8E80D9BD60B6B19704BC85E5C"),"."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"xplad query tx <txhash>\n")))),(0,o.kt)("p",null,"By utilizing xplad, we've confirmed that the Local Network blockchain is functioning properly. For more xplad commands, refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.xpla.io/develop/develop/tools/xplad/commands/"},"Docs")," or try ",(0,o.kt)("inlineCode",{parentName:"p"},"xplad -h")," command."),(0,o.kt)("h2",{id:"use-rpc"},"Making Use of the RPC Network"),(0,o.kt)("p",null,"While setting up the Local Network, editing the ",(0,o.kt)("inlineCode",{parentName:"p"},"~/.xpla/config/config.toml")," file granted you the access to the RPC network. If you visit ",(0,o.kt)("a",{parentName:"p",href:"http://localhost:26657/"},(0,o.kt)("inlineCode",{parentName:"a"},"http://localhost:26657/")),", you'll see a list of APIs you can interact with through the RPC network. Clicking on ",(0,o.kt)("a",{parentName:"p",href:"http://localhost:26657/genesis?"},(0,o.kt)("inlineCode",{parentName:"a"},"//localhost:26657/genesis?"))," will display a JSON result identical to the content of the ",(0,o.kt)("inlineCode",{parentName:"p"},"~/.xpla/config/genesis.json")," file you configured in the example."),(0,o.kt)("p",null,"Furthermore, you can also access the RPC network using WebSocket. Create a JavaScript file (.js), input the code below, and run it!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { WebSocketClient } = require('@xpla/xpla.js');\n\nconst wsclient = new WebSocketClient('ws://localhost:26657/websocket');\n\nwsclient.subscribe('Tx', {}, data => {\n  console.log('Send occured!');\n  console.log(data.value);\n  wsclient.destroy();\n});\n\n\nwsclient.start();\n")),(0,o.kt)("p",null,"Running the JavaScript file alone won't yield any results yet. Go back to the docker container's bash environment and generate a transfer transaction. Once a transaction is created on the blockchain, you'll see the following log in the console where you ran the JavaScript file. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'Send occured!\n{\n  TxResult: {\n    height: \'547\',\n    tx: \'CokBCoYBChwvY29zbW9zLmJhbmsudjFiZXRhMS5Nc2dTZW5kEmYKK3hwbGExbWN2aHFjbmp3cnkwNDZyY3lzNjhocnZ2ZWZxN3p2eXZlMnRqd3oSK3hwbGExbWN2aHFjbmp3cnkwNDZyY3lzNjhocnZ2ZWZxN3p2eXZlMnRqd3oaCgoFYXhwbGESATESYQpZCk8KKC9ldGhlcm1pbnQuY3J5cHRvLnYxLmV0aHNlY3AyNTZrMS5QdWJLZXkSIwohA/hySCvp+biiZ4d7QMI0t9kyk46nCIMwjxGYk/OiIFA/EgQKAggBGAISBBDAmgwaQbdO3umo6oa0e4J3NKtNg+cZmzaC7ljFkxsER9/T7DB5NEsP1hj0pqQjbCy0fsQt/ej+N9Mu74uj2B7ggC2HX0wB\',\n    result: {\n      data: \'Ch4KHC9jb3Ntb3MuYmFuay52MWJldGExLk1zZ1NlbmQ=\',\n      log: \'[{"events":[{"type":"coin_received","attributes":[{"key":"receiver","value":"xpla1mcvhqcnjwry046rcys68hrvvefq7zvyve2tjwz"},{"key":"amount","value":"1axpla"}]},{"type":"coin_spent","attributes":[{"key":"spender","value":"xpla1mcvhqcnjwry046rcys68hrvvefq7zvyve2tjwz"},{"key":"amount","value":"1axpla"}]},{"type":"message","attributes":[{"key":"action","value":"/cosmos.bank.v1beta1.MsgSend"},{"key":"sender","value":"xpla1mcvhqcnjwry046rcys68hrvvefq7zvyve2tjwz"},{"key":"module","value":"bank"}]},{"type":"transfer","attributes":[{"key":"recipient","value":"xpla1mcvhqcnjwry046rcys68hrvvefq7zvyve2tjwz"},{"key":"sender","value":"xpla1mcvhqcnjwry046rcys68hrvvefq7zvyve2tjwz"},{"key":"amount","value":"1axpla"}]}]}]\',\n      gas_wanted: \'200000\',\n      gas_used: \'82168\',\n      events: [Array]\n    }\n  }\n}\n')),(0,o.kt)("p",null,"This demonstrates using WebSocket to access the RPC network and detecting the creation of a transaction on the blockchain. Check the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.xpla.io/develop/develop/tools/xpla-js/websockets/"},"Docs")," and ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/xpladev/xpla.js/blob/main/src/client/WebSocketClient.ts"},"Github")," for more diverse actions you can perform using WebSocket."),(0,o.kt)("h2",{id:"use-swagger"},"Exploring with Swagger"),(0,o.kt)("p",null,"While setting up the Local Network, editing the ",(0,o.kt)("inlineCode",{parentName:"p"},"~/.xpla/config/config.toml")," file granted you the access to Swagger API."),(0,o.kt)("p",null,"Open your browser and go to the address ",(0,o.kt)("a",{parentName:"p",href:"http://localhost:1317/swagger/#/Query/AllBalances"},(0,o.kt)("inlineCode",{parentName:"a"},"http://localhost:1317/swagger/#/Query/AllBalances")),"."),(0,o.kt)("p",null,"Click the ",(0,o.kt)("inlineCode",{parentName:"p"},"Try it out"),' button on the top right corner, and you can directly send a query. Input your created Validator wallet address in the "address" field and press the "Execute" button. '),(0,o.kt)(i.Z,{url:"http://localhost:1317/swagger/#/Query/AllBalances",bodyStyle:{padding:0},mdxType:"BrowserWindow"},(0,o.kt)("div",{className:"flex justify-center",style:{backgroundColor:"hsl(240, 20%, 97%)",position:"relative"}},(0,o.kt)(r.Z,{style:{zIndex:1,maxWidth:"100%"},imgSrc:"/img/3-tutorial/3-deep-understand-xpla/1-local-network/swagger.png",mdxType:"VaultImgCard"}))),(0,o.kt)("p",null,"As shown in the example, you'll receive a response result. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'{\n  "balances": [\n    {\n      "denom": "axpla",\n      "amount": "90000000000000000000"\n    }\n  ],\n  "pagination": {\n    "next_key": null,\n    "total": "1"\n  }\n}\n')),(0,o.kt)("p",null,"Just like you confirmed with xplad, the Swagger API works well, showing that there's 90 XPLA in the Validator wallet."),(0,o.kt)("h2",{id:"use-js"},"Creating Transactions on the Local Network with Javascript"),(0,o.kt)("p",null,"Lastly, let's create a transaction on the Local Network using JavaScript. Create a JavaScript file (.js), paste the code below, and give it a try. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { LCDClient, MsgSend, MnemonicKey } = require(\"@xpla/xpla.js\");\n\nconst lcd = new LCDClient({\n    chainID: 'localnet_1-1',\n    URL: 'http://localhost:1317'\n});\n\nasync function main() {\n    const mk = new MnemonicKey({\n        mnemonic: 'sunny apology silly butter asset win own common margin festival write bullet coast envelope front affair depart struggle taste title liquid search deliver critic',\n    })\n\n    const from = lcd.wallet(mk).key.accAddress;\n    const to = \"xpla1mcvhqcnjwry046rcys68hrvvefq7zvyve2tjwz\";\n    const token = { axpla: 25 };\n\n    const signedTx = await lcd.wallet(mk).createAndSignTx({ \n        msgs: [new MsgSend(from, to, token)], \n    });\n\n    const txResult = await lcd.tx.broadcastSync(signedTx); \n    console.log(\"Your Transaction Hash: \" + txResult.txhash);\n}\nmain()\n")),(0,o.kt)("p",null,"After you get the resulting transaction hash, use xplad to search for it. You'll be able to retrieve the transaction data successfully."),(0,o.kt)("p",null,"The code above isn't significantly different from the code used to create transfer transactions on the testnet in the ",(0,o.kt)("a",{parentName:"p",href:"/startlearning/settings/create-testnet-transaction/send-tx"},"previous step"),". The main change is in the LCDClient's initial values. Only the chainID and URL values have been adjusted to match the Local Network. As a result, all the JavaScript code you've used so far can be seamlessly applied to the Local Network by just modifying the LCDClient's initial values."),(0,o.kt)("h2",{id:"conclusion"},"Wrapping Up"),(0,o.kt)("p",null,"So far, we've explored how to set up the XPLA blockchain Local Network. Now, with the Local Network at your disposal, you can experiment with various approaches within the XPLA blockchain and even dive into developing your own Web3 games."))}k.isMDXComponent=!0}}]);