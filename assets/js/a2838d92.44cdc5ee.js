"use strict";(self.webpackChunkxpla_academy=self.webpackChunkxpla_academy||[]).push([[1030],{34673:(e,n,t)=>{t.d(n,{Z:()=>g});var a=t(87462),s=t(67294),r=t(86010),c=t(72389),o=t(86043);const i={details:"details_lb9f",isBrowser:"isBrowser_bmU9",collapsibleContent:"collapsibleContent_i85q"};function d(e){return!!e&&("SUMMARY"===e.tagName||d(e.parentElement))}function l(e,n){return!!e&&(e===n||l(e.parentElement,n))}function u(e){let{summary:n,children:t,...u}=e;const p=(0,c.Z)(),m=(0,s.useRef)(null),{collapsed:g,setCollapsed:h}=(0,o.u)({initialState:!u.open}),[f,b]=(0,s.useState)(u.open),k=s.isValidElement(n)?n:s.createElement("summary",null,n??"Details");return s.createElement("details",(0,a.Z)({},u,{ref:m,open:f,"data-collapsed":g,className:(0,r.Z)(i.details,p&&i.isBrowser,u.className),onMouseDown:e=>{d(e.target)&&e.detail>1&&e.preventDefault()},onClick:e=>{e.stopPropagation();const n=e.target;d(n)&&l(n,m.current)&&(e.preventDefault(),g?(h(!1),b(!0)):h(!0))}}),k,s.createElement(o.z,{lazy:!1,collapsed:g,disableSSRStyle:!0,onCollapseTransitionEnd:e=>{h(e),b(!e)}},s.createElement("div",{className:i.collapsibleContent},t)))}const p={details:"details_b_Ee"},m="alert alert--info";function g(e){let{...n}=e;return s.createElement(u,(0,a.Z)({},n,{className:(0,r.Z)(m,p.details,n.className)}))}},85162:(e,n,t)=>{t.d(n,{Z:()=>c});var a=t(67294),s=t(86010);const r={tabItem:"tabItem_Ymn6"};function c(e){let{children:n,hidden:t,className:c}=e;return a.createElement("div",{role:"tabpanel",className:(0,s.Z)(r.tabItem,c),hidden:t},n)}},74866:(e,n,t)=>{t.d(n,{Z:()=>y});var a=t(87462),s=t(67294),r=t(86010),c=t(12466),o=t(16550),i=t(91980),d=t(67392),l=t(50012);function u(e){return function(e){return s.Children.map(e,(e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:s}}=e;return{value:n,label:t,attributes:a,default:s}}))}function p(e){const{values:n,children:t}=e;return(0,s.useMemo)((()=>{const e=n??u(t);return function(e){const n=(0,d.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function g(e){let{queryString:n=!1,groupId:t}=e;const a=(0,o.k6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,i._X)(r),(0,s.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(a.location.search);n.set(r,e),a.replace({...a.location,search:n.toString()})}),[r,a])]}function h(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,r=p(e),[c,o]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:r}))),[i,d]=g({queryString:t,groupId:a}),[u,h]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,r]=(0,l.Nk)(t);return[a,(0,s.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:a}),f=(()=>{const e=i??u;return m({value:e,tabValues:r})?e:null})();(0,s.useLayoutEffect)((()=>{f&&o(f)}),[f]);return{selectedValue:c,selectValue:(0,s.useCallback)((e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);o(e),d(e),h(e)}),[d,h,r]),tabValues:r}}var f=t(72389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function k(e){let{className:n,block:t,selectedValue:o,selectValue:i,tabValues:d}=e;const l=[],{blockElementScrollPositionUntilNextRender:u}=(0,c.o5)(),p=e=>{const n=e.currentTarget,t=l.indexOf(n),a=d[t].value;a!==o&&(u(n),i(a))},m=e=>{let n=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":t},n)},d.map((e=>{let{value:n,label:t,attributes:c}=e;return s.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===n?0:-1,"aria-selected":o===n,key:n,ref:e=>l.push(e),onKeyDown:m,onClick:p},c,{className:(0,r.Z)("tabs__item",b.tabItem,c?.className,{"tabs__item--active":o===n})}),t??n)})))}function v(e){let{lazy:n,children:t,selectedValue:a}=e;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===a));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return s.createElement("div",{className:"margin-top--md"},r.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function w(e){const n=h(e);return s.createElement("div",{className:(0,r.Z)("tabs-container",b.tabList)},s.createElement(k,(0,a.Z)({},e,n)),s.createElement(v,(0,a.Z)({},e,n)))}function y(e){const n=(0,f.Z)();return s.createElement(w,(0,a.Z)({key:String(n)},e))}},17015:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>N,contentTitle:()=>_,default:()=>M,frontMatter:()=>x,metadata:()=>C,toc:()=>S});var a=t(87462),s=t(67294),r=t(3905),c=t(18947);const o=()=>s.createElement(c.oT,{files:{"Cargo.toml":i,"Cargo.lock":h,"src/lib.rs":d,"src/error.rs":l,"src/msgs.rs":p,"src/query.rs":m,"src/state.rs":g,"src/execute.rs":u},customSetup:{entry:"src/lib.rs"},options:{visibleFiles:["src/lib.rs","src/error.rs","src/msgs.rs","src/query.rs","src/state.rs","src/execute.rs","/Cargo.toml","/Cargo.lock"]}},s.createElement(c.sp,null,s.createElement(c.Lj,{autoHiddenFiles:!0}),s.createElement(c._V,{showLineNumbers:!0}))),i='[package]\nname = "game-data-save"\nversion = "0.0.1"\nauthors = ["Your Name <your@email.com>"]\nedition = "2018"\ndescription = "XPLA Contract Example"\nlicense = "Apache-2.0"\nrepository = ""\n\n[lib]\ncrate-type = ["cdylib", "rlib"]\n\n[dependencies]\ncw0 = { version = "0.10.3" }\ncw20 = { version = "0.13.4" }\ncw-storage-plus = { version = "0.13.4" }\ncosmwasm-std = { version = "1.0.0" }\nschemars = "0.8.1"\nserde = { version = "1.0.103", default-features = false, features = ["derive"] }\nthiserror = { version = "1.0.23" }\n\n[package.metadata.scripts]\noptimize = """docker run --rm -v %cd%:/code --mount type=volume,source=game-data-save_cache,target=/code/target --mount type=volume,source=registry_cache,target=/usr/local/cargo/registry cosmwasm/rust-optimizer:0.12.6"""',d="mod state;\nmod execute;\nmod msgs;\nmod error;\nmod query;\n\npub use crate::msgs::{InstantiateMsg, ExecuteMsg, QueryMsg};\npub use crate::state::GameDataSaveContract;\npub use crate::error::ContractError;\n\n#[cfg(not(feature = \"library\"))]\npub mod entry {\n  use super::*;\n\n  use cosmwasm_std::entry_point;\n  use cosmwasm_std::{Binary, Deps, DepsMut, Env, MessageInfo, Response, StdResult};\n\n  #[entry_point]\n  pub fn instantiate(\n      deps: DepsMut,\n      env: Env,\n      info: MessageInfo,\n      msg: InstantiateMsg,\n  ) -> StdResult<Response> {\n      let tract: GameDataSaveContract<'_> = GameDataSaveContract::default();\n      tract.instantiate(deps, env, info, msg)\n  }\n\n  #[entry_point]\n  pub fn execute(\n      deps: DepsMut,\n      env: Env,\n      info: MessageInfo,\n      msg: ExecuteMsg,\n  ) -> Result<Response, ContractError> {\n      let tract: GameDataSaveContract<'_> = GameDataSaveContract::default();\n      tract.execute(deps, env, info, msg)\n  }\n\n  #[entry_point]\n  pub fn query(deps: Deps, env: Env, msg: QueryMsg) -> StdResult<Binary> {\n      let tract: GameDataSaveContract<'_> = GameDataSaveContract::default();\n      tract.query(deps, env, msg)\n  }\n\n}\n",l='use cosmwasm_std::StdError;\nuse thiserror::Error;\n\n#[derive(Error, Debug, PartialEq)]\npub enum ContractError {\n  #[error("{0}")]\n  Std(#[from] StdError),\n\n  #[error("Unauthorized")]\n  Unauthorized {},\n  \n}',u='use cosmwasm_std::{DepsMut, Env, MessageInfo, Response, StdResult};\n\nuse crate::state::{Config, GameDataSaveContract, GameData};\nuse crate::msgs::{InstantiateMsg, ExecuteMsg};\nuse crate::error::ContractError;\n\nimpl<\'a> GameDataSaveContract<\'a> {\n  pub fn instantiate(\n    &self,\n    deps: DepsMut,\n    _env: Env,\n    _info: MessageInfo,\n    msg: InstantiateMsg,\n  ) -> StdResult<Response> {\n    let config = Config {\n      owner: deps.api.addr_validate(&msg.owner)?,\n      owner_candidate: deps.api.addr_validate(&msg.owner)?,\n      description: msg.description,\n    };\n\n    self.config.save(deps.storage, &config)?;\n\n    Ok(Response::new())\n  }\n\n  pub fn execute(\n    &self,\n    deps: DepsMut,\n    env: Env,\n    info: MessageInfo,\n    msg: ExecuteMsg\n  ) -> Result<Response, ContractError> {\n    match msg{\n      ExecuteMsg::SaveData { \n        user, \n        last_stage,\n        high_score, \n        game_gold \n      } => self.save_data(deps, env, info, user, last_stage, high_score, game_gold),\n\n      ExecuteMsg::UpdateConfig { \n        owner_candidate,\n        description,\n      } => self.update_config(deps, env, info, owner_candidate, description),\n\n      ExecuteMsg::AllowOwner {\n\n      } => self.allow_owner(deps, env, info),\n    }\n  }\n}\n\n// execute functions\nimpl<\'a> GameDataSaveContract<\'a> {\n\n  pub fn save_data(\n    &self,\n    deps: DepsMut,\n    _env: Env,\n    info: MessageInfo,\n    user: String,\n    last_stage: Option<u64>,\n    high_score: Option<u64>,\n    game_gold: Option<i64>,\n  ) -> Result<Response, ContractError> {\n    let config: Config = self.config.load(deps.storage)?;\n    \n    if info.sender != config.owner {\n      return Err(ContractError::Unauthorized {})\n    }\n\n    self.game_data.update(deps.storage, user.clone(), |res| -> StdResult<GameData> { \n      let mut data = res.unwrap_or_default();\n      if let Some(ls) = last_stage {\n        if ls > data.last_stage {\n          data.last_stage = ls;\n        }\n      }\n      if let Some(hs) = high_score {\n        if hs > data.high_score {\n          data.high_score = hs;\n        }\n      }\n      if let Some(gg) = game_gold {\n        data.game_gold += gg;\n      }\n      Ok(data)\n    })?;\n\n\n    Ok(Response::new()\n          .add_attribute("action", "save_data")\n          .add_attribute("user", user))\n\n  }\n\n  pub fn update_config(\n    &self,\n    deps: DepsMut,\n    _env: Env,\n    info: MessageInfo,\n    owner_candidate: Option<String>,\n    description: Option<String>,\n  ) -> Result<Response, ContractError> {\n    let mut config: Config = self.config.load(deps.storage)?;\n    \n    if info.sender != config.owner {\n      return Err(ContractError::Unauthorized {})\n    }\n\n    if let Some(candidate) = owner_candidate {\n      let new_owner_candidate = deps.api.addr_validate(&candidate)?;\n      config.owner_candidate = new_owner_candidate;\n      self.config.save(deps.storage, &config)?;\n    }\n\n    if let Some(descript) = description {\n      config.description = descript;\n    }\n\n    self.config.save(deps.storage, &config)?;\n\n    Ok(Response::new().add_attribute("action", "update_config"))\n  }\n\n  pub fn allow_owner(\n    &self,\n    deps: DepsMut,\n    _env: Env,\n    info: MessageInfo,\n  ) -> Result<Response, ContractError> {\n\n    let mut config = self.config.load(deps.storage)?;\n    // only owner_candidate can execute\n    if info.sender != config.owner_candidate {\n      return Err(ContractError::Unauthorized{})\n    }\n\n    config.owner = config.owner_candidate.clone();\n    config.owner_candidate = config.owner_candidate.clone();\n    self.config.save(deps.storage, &config)?;\n\n    Ok(Response::new()\n      .add_attribute("action", "allow_owner")\n      .add_attribute("new owner", info.sender)\n    )\n  }\n  \n}\n',p='\nuse schemars::JsonSchema;\nuse serde::{Deserialize, Serialize};\n\n\n#[derive(Serialize, Deserialize, Clone, PartialEq, JsonSchema, Debug)]\npub struct InstantiateMsg {\n  pub owner: String,\n  pub description: String,\n}\n\n#[derive(Serialize, Deserialize, Clone, PartialEq, JsonSchema, Debug)]\n#[serde(rename_all = "snake_case")]\npub enum ExecuteMsg {\n\n  SaveData {\n    user: String,\n    last_stage: Option<u64>,\n    high_score: Option<u64>,\n    game_gold: Option<i64>,\n  },\n  \n  UpdateConfig {\n    owner_candidate: Option<String>,\n    description: Option<String>,\n  },\n\n  AllowOwner {},\n\n}\n\n#[derive(Serialize, Deserialize, Clone, PartialEq, JsonSchema, Debug)]\n#[serde(rename_all = "snake_case")]\npub enum QueryMsg {\n  Config {},\n\n  GameData {\n    user: String,\n  }\n}\n',m="use cosmwasm_std::{to_binary, Binary, Deps, StdResult, Env};\nuse crate::state::{GameDataSaveContract, Config, GameData};\nuse crate::msgs::QueryMsg;\n\nimpl<'a> GameDataSaveContract<'a> {\n  pub fn query(&self, deps: Deps, _env: Env, msg: QueryMsg) -> StdResult<Binary> {\n    match msg {\n      QueryMsg::Config {} => to_binary(&self.config(deps)?),\n      QueryMsg::GameData { user } => to_binary(&self.game_data(deps, user)?)\n    }\n  }\n}\n\n\nimpl<'a> GameDataSaveContract<'a> {\n\n  fn config(\n    &self, \n    deps: Deps,\n  ) -> StdResult<Config> {\n    self.config.load(deps.storage)\n  }\n\n  fn game_data(\n    &self, \n    deps: Deps,\n    user: String,\n  ) -> StdResult<GameData> {\n    let data = self.game_data.may_load(deps.storage, user)?;\n    if let Some(user_data) = data {\n      return Ok(user_data)\n    } else {\n      return Ok(GameData{\n        last_stage: 0,\n        high_score: 0,\n        game_gold: 0,\n      })\n    }\n  }\n\n}\n",g="use schemars::JsonSchema;\nuse serde::{Deserialize, Serialize};\nuse cosmwasm_std::Addr;\nuse cw_storage_plus::{Item, Map};\n\n#[derive(Serialize, Deserialize, Clone, PartialEq, JsonSchema, Debug)]\npub struct Config {\n  pub owner: Addr,\n  pub owner_candidate: Addr,\n  pub description: String,\n}\n\n#[derive(Serialize, Deserialize, Clone, PartialEq, JsonSchema, Debug, Default)]\npub struct GameData {\n  pub last_stage: u64,\n  pub high_score: u64,\n  pub game_gold: i64,\n}\n\n\npub struct GameDataSaveContract<'a> {\n  pub config: Item<'a, Config>,\n  pub game_data: Map<'a, String, GameData>,\n}\n\nimpl Default for GameDataSaveContract<'static> {\n  fn default() -> Self {\n    Self::new(\n      \"config\",\n      \"game_data\",\n    )\n  }\n}\n\nimpl<'a> GameDataSaveContract<'a> {\n  fn new(\n    config_key: &'a str,\n    game_data_key: &'a str,\n  ) -> Self {\n\n    Self {\n      config: Item::new(config_key),\n      game_data: Map::new(game_data_key),\n    }\n  }\n}\n\n",h='# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = "base16ct"\nversion = "0.1.1"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "349a06037c7bf932dd7e7d1f653678b2038b9ad46a74102f1fc7bd7872678cce"\n\n[[package]]\nname = "base64"\nversion = "0.13.0"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "904dfeac50f3cdaba28fc6f57fdcddb75f49ed61346676a78c4ffe55877802fd"\n\n[[package]]\nname = "base64ct"\nversion = "1.5.1"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "3bdca834647821e0b13d9539a8634eb62d3501b6b6c2cec1722786ee6671b851"\n\n[[package]]\nname = "block-buffer"\nversion = "0.9.0"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "4152116fd6e9dadb291ae18fc1ec3575ed6d84c29642d97890f4b4a3417297e4"\ndependencies = [\n "generic-array",\n]\n\n[[package]]\nname = "byteorder"\nversion = "1.4.3"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "14c189c53d098945499cdfa7ecc63567cf3886b3332b312a5b4585d8d3a6a610"\n\n[[package]]\nname = "cfg-if"\nversion = "1.0.0"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd"\n\n[[package]]\nname = "const-oid"\nversion = "0.7.1"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "e4c78c047431fee22c1a7bb92e00ad095a02a983affe4d8a72e2a2c62c1b94f3"\n\n[[package]]\nname = "cosmwasm-crypto"\nversion = "1.0.0"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "5eb0afef2325df81aadbf9be1233f522ed8f6e91df870c764bc44cca2b1415bd"\ndependencies = [\n "digest",\n "ed25519-zebra",\n "k256",\n "rand_core 0.6.3",\n "thiserror",\n]\n\n[[package]]\nname = "cosmwasm-derive"\nversion = "1.0.0"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "4b36e527620a2a3e00e46b6e731ab6c9b68d11069c986f7d7be8eba79ef081a4"\ndependencies = [\n "syn",\n]\n\n[[package]]\nname = "cosmwasm-std"\nversion = "1.0.0"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "875994993c2082a6fcd406937bf0fca21c349e4a624f3810253a14fa83a3a195"\ndependencies = [\n "base64",\n "cosmwasm-crypto",\n "cosmwasm-derive",\n "forward_ref",\n "schemars",\n "serde",\n "serde-json-wasm",\n "thiserror",\n "uint",\n]\n\n[[package]]\nname = "cpufeatures"\nversion = "0.2.4"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "dc948ebb96241bb40ab73effeb80d9f93afaad49359d159a5e61be51619fe813"\ndependencies = [\n "libc",\n]\n\n[[package]]\nname = "crunchy"\nversion = "0.2.2"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "7a81dae078cea95a014a339291cec439d2f232ebe854a9d672b796c6afafa9b7"\n\n[[package]]\nname = "crypto-bigint"\nversion = "0.3.2"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "03c6a1d5fa1de37e071642dfa44ec552ca5b299adb128fab16138e24b548fd21"\ndependencies = [\n "generic-array",\n "rand_core 0.6.3",\n "subtle",\n "zeroize",\n]\n\n[[package]]\nname = "crypto-mac"\nversion = "0.11.1"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "b1d1a86f49236c215f271d40892d5fc950490551400b02ef360692c29815c714"\ndependencies = [\n "generic-array",\n "subtle",\n]\n\n[[package]]\nname = "curve25519-dalek"\nversion = "3.2.1"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "90f9d052967f590a76e62eb387bd0bbb1b000182c3cefe5364db6b7211651bc0"\ndependencies = [\n "byteorder",\n "digest",\n "rand_core 0.5.1",\n "subtle",\n "zeroize",\n]\n\n[[package]]\nname = "cw-storage-plus"\nversion = "0.13.4"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "648b1507290bbc03a8d88463d7cd9b04b1fa0155e5eef366c4fa052b9caaac7a"\ndependencies = [\n "cosmwasm-std",\n "schemars",\n "serde",\n]\n\n[[package]]\nname = "cw-utils"\nversion = "0.13.4"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "9dbaecb78c8e8abfd6b4258c7f4fbeb5c49a5e45ee4d910d3240ee8e1d714e1b"\ndependencies = [\n "cosmwasm-std",\n "schemars",\n "serde",\n "thiserror",\n]\n\n[[package]]\nname = "cw0"\nversion = "0.10.3"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "8ae676b6cced78a3d38ad4b01ab4ed66fc78ac191c3c0d6bfd5372cb2efd473b"\ndependencies = [\n "cosmwasm-std",\n "schemars",\n "serde",\n "thiserror",\n]\n\n[[package]]\nname = "cw20"\nversion = "0.13.4"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "4cb782b8f110819a4eb5dbbcfed25ffba49ec16bbe32b4ad8da50a5ce68fec05"\ndependencies = [\n "cosmwasm-std",\n "cw-utils",\n "schemars",\n "serde",\n]\n\n[[package]]\nname = "der"\nversion = "0.5.1"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "6919815d73839e7ad218de758883aae3a257ba6759ce7a9992501efbb53d705c"\ndependencies = [\n "const-oid",\n]\n\n[[package]]\nname = "digest"\nversion = "0.9.0"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "d3dd60d1080a57a05ab032377049e0591415d2b31afd7028356dbf3cc6dcb066"\ndependencies = [\n "generic-array",\n]\n\n[[package]]\nname = "dyn-clone"\nversion = "1.0.9"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "4f94fa09c2aeea5b8839e414b7b841bf429fd25b9c522116ac97ee87856d88b2"\n\n[[package]]\nname = "ecdsa"\nversion = "0.13.4"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "d0d69ae62e0ce582d56380743515fefaf1a8c70cec685d9677636d7e30ae9dc9"\ndependencies = [\n "der",\n "elliptic-curve",\n "rfc6979",\n "signature",\n]\n\n[[package]]\nname = "ed25519-zebra"\nversion = "3.0.0"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "403ef3e961ab98f0ba902771d29f842058578bb1ce7e3c59dad5a6a93e784c69"\ndependencies = [\n "curve25519-dalek",\n "hex",\n "rand_core 0.6.3",\n "serde",\n "sha2",\n "thiserror",\n "zeroize",\n]\n\n[[package]]\nname = "elliptic-curve"\nversion = "0.11.12"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "25b477563c2bfed38a3b7a60964c49e058b2510ad3f12ba3483fd8f62c2306d6"\ndependencies = [\n "base16ct",\n "crypto-bigint",\n "der",\n "ff",\n "generic-array",\n "group",\n "rand_core 0.6.3",\n "sec1",\n "subtle",\n "zeroize",\n]\n\n[[package]]\nname = "ff"\nversion = "0.11.1"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "131655483be284720a17d74ff97592b8e76576dc25563148601df2d7c9080924"\ndependencies = [\n "rand_core 0.6.3",\n "subtle",\n]\n\n[[package]]\nname = "forward_ref"\nversion = "1.0.0"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "c8cbd1169bd7b4a0a20d92b9af7a7e0422888bd38a6f5ec29c1fd8c1558a272e"\n\n[[package]]\nname = "game-data-save"\nversion = "0.0.1"\ndependencies = [\n "cosmwasm-std",\n "cw-storage-plus",\n "cw0",\n "cw20",\n "schemars",\n "serde",\n "thiserror",\n]\n\n[[package]]\nname = "generic-array"\nversion = "0.14.6"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "bff49e947297f3312447abdca79f45f4738097cc82b06e72054d2223f601f1b9"\ndependencies = [\n "typenum",\n "version_check",\n]\n\n[[package]]\nname = "getrandom"\nversion = "0.1.16"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "8fc3cb4d91f53b50155bdcfd23f6a4c39ae1969c2ae85982b135750cccaf5fce"\ndependencies = [\n "cfg-if",\n "libc",\n "wasi 0.9.0+wasi-snapshot-preview1",\n]\n\n[[package]]\nname = "getrandom"\nversion = "0.2.7"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "4eb1a864a501629691edf6c15a593b7a51eebaa1e8468e9ddc623de7c9b58ec6"\ndependencies = [\n "cfg-if",\n "libc",\n "wasi 0.11.0+wasi-snapshot-preview1",\n]\n\n[[package]]\nname = "group"\nversion = "0.11.0"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "bc5ac374b108929de78460075f3dc439fa66df9d8fc77e8f12caa5165fcf0c89"\ndependencies = [\n "ff",\n "rand_core 0.6.3",\n "subtle",\n]\n\n[[package]]\nname = "hex"\nversion = "0.4.3"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70"\n\n[[package]]\nname = "hmac"\nversion = "0.11.0"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "2a2a2320eb7ec0ebe8da8f744d7812d9fc4cb4d09344ac01898dbcb6a20ae69b"\ndependencies = [\n "crypto-mac",\n "digest",\n]\n\n[[package]]\nname = "itoa"\nversion = "1.0.3"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "6c8af84674fe1f223a982c933a0ee1086ac4d4052aa0fb8060c12c6ad838e754"\n\n[[package]]\nname = "k256"\nversion = "0.10.4"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "19c3a5e0a0b8450278feda242592512e09f61c72e018b8cd5c859482802daf2d"\ndependencies = [\n "cfg-if",\n "ecdsa",\n "elliptic-curve",\n "sec1",\n "sha2",\n]\n\n[[package]]\nname = "libc"\nversion = "0.2.132"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "8371e4e5341c3a96db127eb2465ac681ced4c433e01dd0e938adbef26ba93ba5"\n\n[[package]]\nname = "opaque-debug"\nversion = "0.3.0"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "624a8340c38c1b80fd549087862da4ba43e08858af025b236e509b6649fc13d5"\n\n[[package]]\nname = "pkcs8"\nversion = "0.8.0"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "7cabda3fb821068a9a4fab19a683eac3af12edf0f34b94a8be53c4972b8149d0"\ndependencies = [\n "der",\n "spki",\n "zeroize",\n]\n\n[[package]]\nname = "proc-macro2"\nversion = "1.0.43"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "0a2ca2c61bc9f3d74d2886294ab7b9853abd9c1ad903a3ac7815c58989bb7bab"\ndependencies = [\n "unicode-ident",\n]\n\n[[package]]\nname = "quote"\nversion = "1.0.21"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "bbe448f377a7d6961e30f5955f9b8d106c3f5e449d493ee1b125c1d43c2b5179"\ndependencies = [\n "proc-macro2",\n]\n\n[[package]]\nname = "rand_core"\nversion = "0.5.1"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "90bde5296fc891b0cef12a6d03ddccc162ce7b2aff54160af9338f8d40df6d19"\ndependencies = [\n "getrandom 0.1.16",\n]\n\n[[package]]\nname = "rand_core"\nversion = "0.6.3"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "d34f1408f55294453790c48b2f1ebbb1c5b4b7563eb1f418bcfcfdbb06ebb4e7"\ndependencies = [\n "getrandom 0.2.7",\n]\n\n[[package]]\nname = "rfc6979"\nversion = "0.1.0"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "96ef608575f6392792f9ecf7890c00086591d29a83910939d430753f7c050525"\ndependencies = [\n "crypto-bigint",\n "hmac",\n "zeroize",\n]\n\n[[package]]\nname = "ryu"\nversion = "1.0.11"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "4501abdff3ae82a1c1b477a17252eb69cee9e66eb915c1abaa4f44d873df9f09"\n\n[[package]]\nname = "schemars"\nversion = "0.8.10"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "1847b767a3d62d95cbf3d8a9f0e421cf57a0d8aa4f411d4b16525afb0284d4ed"\ndependencies = [\n "dyn-clone",\n "schemars_derive",\n "serde",\n "serde_json",\n]\n\n[[package]]\nname = "schemars_derive"\nversion = "0.8.10"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "af4d7e1b012cb3d9129567661a63755ea4b8a7386d339dc945ae187e403c6743"\ndependencies = [\n "proc-macro2",\n "quote",\n "serde_derive_internals",\n "syn",\n]\n\n[[package]]\nname = "sec1"\nversion = "0.2.1"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "08da66b8b0965a5555b6bd6639e68ccba85e1e2506f5fbb089e93f8a04e1a2d1"\ndependencies = [\n "der",\n "generic-array",\n "pkcs8",\n "subtle",\n "zeroize",\n]\n\n[[package]]\nname = "serde"\nversion = "1.0.144"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "0f747710de3dcd43b88c9168773254e809d8ddbdf9653b84e2554ab219f17860"\ndependencies = [\n "serde_derive",\n]\n\n[[package]]\nname = "serde-json-wasm"\nversion = "0.4.1"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "479b4dbc401ca13ee8ce902851b834893251404c4f3c65370a49e047a6be09a5"\ndependencies = [\n "serde",\n]\n\n[[package]]\nname = "serde_derive"\nversion = "1.0.144"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "94ed3a816fb1d101812f83e789f888322c34e291f894f19590dc310963e87a00"\ndependencies = [\n "proc-macro2",\n "quote",\n "syn",\n]\n\n[[package]]\nname = "serde_derive_internals"\nversion = "0.26.0"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "85bf8229e7920a9f636479437026331ce11aa132b4dde37d121944a44d6e5f3c"\ndependencies = [\n "proc-macro2",\n "quote",\n "syn",\n]\n\n[[package]]\nname = "serde_json"\nversion = "1.0.85"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "e55a28e3aaef9d5ce0506d0a14dbba8054ddc7e499ef522dd8b26859ec9d4a44"\ndependencies = [\n "itoa",\n "ryu",\n "serde",\n]\n\n[[package]]\nname = "sha2"\nversion = "0.9.9"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "4d58a1e1bf39749807d89cf2d98ac2dfa0ff1cb3faa38fbb64dd88ac8013d800"\ndependencies = [\n "block-buffer",\n "cfg-if",\n "cpufeatures",\n "digest",\n "opaque-debug",\n]\n\n[[package]]\nname = "signature"\nversion = "1.4.0"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "02658e48d89f2bec991f9a78e69cfa4c316f8d6a6c4ec12fae1aeb263d486788"\ndependencies = [\n "digest",\n "rand_core 0.6.3",\n]\n\n[[package]]\nname = "spki"\nversion = "0.5.4"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "44d01ac02a6ccf3e07db148d2be087da624fea0221a16152ed01f0496a6b0a27"\ndependencies = [\n "base64ct",\n "der",\n]\n\n[[package]]\nname = "static_assertions"\nversion = "1.1.0"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f"\n\n[[package]]\nname = "subtle"\nversion = "2.4.1"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "6bdef32e8150c2a081110b42772ffe7d7c9032b606bc226c8260fd97e0976601"\n\n[[package]]\nname = "syn"\nversion = "1.0.99"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "58dbef6ec655055e20b86b15a8cc6d439cca19b667537ac6a1369572d151ab13"\ndependencies = [\n "proc-macro2",\n "quote",\n "unicode-ident",\n]\n\n[[package]]\nname = "thiserror"\nversion = "1.0.32"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "f5f6586b7f764adc0231f4c79be7b920e766bb2f3e51b3661cdb263828f19994"\ndependencies = [\n "thiserror-impl",\n]\n\n[[package]]\nname = "thiserror-impl"\nversion = "1.0.32"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "12bafc5b54507e0149cdf1b145a5d80ab80a90bcd9275df43d4fff68460f6c21"\ndependencies = [\n "proc-macro2",\n "quote",\n "syn",\n]\n\n[[package]]\nname = "typenum"\nversion = "1.15.0"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "dcf81ac59edc17cc8697ff311e8f5ef2d99fcbd9817b34cec66f90b6c3dfd987"\n\n[[package]]\nname = "uint"\nversion = "0.9.3"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "12f03af7ccf01dd611cc450a0d10dbc9b745770d096473e2faf0ca6e2d66d1e0"\ndependencies = [\n "byteorder",\n "crunchy",\n "hex",\n "static_assertions",\n]\n\n[[package]]\nname = "unicode-ident"\nversion = "1.0.3"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "c4f5b37a154999a8f3f98cc23a628d850e154479cd94decf3414696e12e31aaf"\n\n[[package]]\nname = "version_check"\nversion = "0.9.4"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f"\n\n[[package]]\nname = "wasi"\nversion = "0.9.0+wasi-snapshot-preview1"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "cccddf32554fecc6acb585f82a32a72e28b48f8c4c1883ddfeeeaa96f7d8e519"\n\n[[package]]\nname = "wasi"\nversion = "0.11.0+wasi-snapshot-preview1"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423"\n\n[[package]]\nname = "zeroize"\nversion = "1.3.0"\nsource = "registry+https://github.com/rust-lang/crates.io-index"\nchecksum = "4756f7db3f7b5574938c3eb1c117038b8e07f95ee6718c0efad4ac21508f1efd"\n',f=()=>s.createElement(c.xR,{customSetup:{dependencies:{"@xpla/xpla.js":"^0.3.1","crypto-browserify":"latest"},entry:"index.js"},files:{"/index.js":"const { LCDClient, MnemonicKey, MsgInstantiateContract, Fee, SignMode } = require(\"@xpla/xpla.js\");\n\nconst lcd = new LCDClient({\n  chainID: 'cube_47-5',\n  URL: 'https://cube-lcd.xpla.dev'\n});\n\nconst main = async () => {\n  const mk = new MnemonicKey({\n    mnemonic: 'myth snow ski simple century dad gun dolphin sail lawsuit fringe image toast betray frown keep harbor flash table prevent isolate panic tag vehicle' // \uc5ec\ub7ec\ubd84\uc758 \ub2c8\ubaa8\ub2c9 \ub2e8\uc5b4\ub85c \ubc14\uafd4\uc8fc\uc138\uc694.\n  })\n\n  const wallet = lcd.wallet(mk);\n  const myWalletAddress = wallet.key.accAddress;\n\n  const init_msg = {\n    owner: \"xpla1cwduqw0z8y66mnfpev2mvrzzzu98tuexepmwrk\",\n    description: \"Game Data Contract\",\n  };\n\n  const instantiate = new MsgInstantiateContract(\n    myWalletAddress, // sender\n    myWalletAddress, // admin\n    571, // Example Contract Code ID\n    init_msg,\n    {}, \n    'My First Comswasm Contract', \n  );\n\n  const signedTx = await lcd.wallet(mk).createAndSignTx({ \n    msgs: [instantiate]\n  });\n\n  const txResult = await lcd.tx.broadcastSync(signedTx);\n  console.log(txResult.txhash);\n}\nmain()"},options:{layout:"console",showLineNumbers:!0,editorHeight:600}}),b=()=>s.createElement(c.xR,{customSetup:{dependencies:{"@xpla/xpla.js":"^0.3.1","crypto-browserify":"latest"},entry:"index.js"},files:{"/index.js":"const { LCDClient,  MnemonicKey, MsgExecuteContract } = require(\"@xpla/xpla.js\");\n\nconst lcd = new LCDClient({\n    chainID: 'cube_47-5',\n    URL: 'https://cube-lcd.xpla.dev'\n});\n\nconst main = async () => {\n    const mk = new MnemonicKey({\n    mnemonic: 'myth snow ski simple century dad gun dolphin sail lawsuit fringe image toast betray frown keep harbor flash table prevent isolate panic tag vehicle'\n    })\n\n    const wallet = lcd.wallet(mk);\n    const myWalletAddress = wallet.key.accAddress;\n    \n    const contractAddress = \"xpla1k6ufjtkyjnxgkmxjew96n2kssdzslpnp398ghm82hk5tt2xdls9spnufcz\"; // example-4.js\uc5d0\uc11c \uc0dd\uc131\ud55c cw20 \ud1a0\ud070\uc758 \uc8fc\uc18c\ub85c \uad50\uccb4\ud569\ub2c8\ub2e4.\n\n    const executeMsg = {\n      save_data : {\n          user : \"xpla1cwduqw0z8y66mnfpev2mvrzzzu98tuexepmwrk\",\n          last_stage : 10,\n          high_score : 100,\n          game_gold : 10\n      }\n    };\n    \n    const message = new MsgExecuteContract(\n        myWalletAddress,\n        contractAddress,\n        executeMsg\n    );\n    \n    const signedTx = await lcd.wallet(mk).createAndSignTx({ // \ud2b8\ub79c\uc7ad\uc158 \uc0dd\uc131 \ubc0f \uc0ac\uc774\ub2dd, \ud2b8\ub79c\uc7ad\uc158 fee \uc124\uc815\n        msgs: [message]\n    });\n\n    const txResult = await lcd.tx.broadcastSync(signedTx);\n    console.log(txResult.txhash);\n}\nmain()"},options:{layout:"console",showLineNumbers:!0,editorHeight:600}}),k=()=>s.createElement(c.xR,{customSetup:{dependencies:{"@xpla/xpla.js":"^0.3.1","crypto-browserify":"latest"},entry:"index.js"},files:{"/index.js":'const { LCDClient } = require("@xpla/xpla.js");\n\nconst lcd = new LCDClient({\n    chainID: \'cube_47-5\',\n    URL: \'https://cube-lcd.xpla.dev\'\n});\n\nasync function main() {\n    const contractAddress = "xpla1k6ufjtkyjnxgkmxjew96n2kssdzslpnp398ghm82hk5tt2xdls9spnufcz";\n    \n    const queryMsg = {\n        game_data : {\n            user : "xpla1cwduqw0z8y66mnfpev2mvrzzzu98tuexepmwrk"\n        }\n    }\n\n    const gameData = await lcd.wasm.contractQuery(contractAddress, queryMsg);\n    console.log(gameData);\n}\nmain()'},options:{layout:"console",showLineNumbers:!0,editorHeight:400}});t(34673);var v=t(74866),w=t(85162),y=t(60614);const x={sidebar_position:5},_="Write and Build Cosmwasm Contracts",C={unversionedId:"tutorial/deep-understand-xpla/write-contract",id:"tutorial/deep-understand-xpla/write-contract",title:"Write and Build Cosmwasm Contracts",description:"In the previous example, we went through the process of Instantiate, Execute, and Query for the CW20 and CW721 contracts.",source:"@site/startlearning/3-tutorial/3-deep-understand-xpla/4-write-contract.mdx",sourceDirName:"3-tutorial/3-deep-understand-xpla",slug:"/tutorial/deep-understand-xpla/write-contract",permalink:"/xpla-academy-dev/startlearning/tutorial/deep-understand-xpla/write-contract",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Connect React with XPLA Vault Wallet via Wallet Provider",permalink:"/xpla-academy-dev/startlearning/tutorial/deep-understand-xpla/walletprovider"},next:{title:"Design Convert System",permalink:"/xpla-academy-dev/startlearning/tutorial/deep-understand-xpla/convert"}},N={},S=[{value:"Index",id:"index",level:2},{value:"Prerequisite",id:"prerequisite",level:2},{value:"Contract Creation Process",id:"order-of-storecode",level:2},{value:"Code Provision and Build",id:"build-contract",level:2},{value:"Creating and Using the Contract",id:"use-contract",level:2},{value:"StoreCode",id:"storecode",level:3},{value:"Instantiate",id:"instantiate",level:3},{value:"Execute",id:"execute",level:3},{value:"Query",id:"query",level:3},{value:"Wrapping Up",id:"conclusion",level:2}],E={toc:S},D="wrapper";function M(e){let{components:n,...t}=e;return(0,r.kt)(D,(0,a.Z)({},E,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"write-and-build-cosmwasm-contracts"},"Write and Build Cosmwasm Contracts"),(0,r.kt)("p",null,"In the previous example, we went through the process of Instantiate, Execute, and Query for the ",(0,r.kt)("a",{parentName:"p",href:"/startlearning/tutorial/make-cw20/make-cw20-with-vault"},"CW20")," and ",(0,r.kt)("a",{parentName:"p",href:"/startlearning/tutorial/make-cw721/make-nft-vault"},"CW721")," contracts.\nBoth CW20 and CW721 contracts are built using the Cosmwasm module and the Rust language. Since both contracts are standard contracts, they were already deployed on the XPLA blockchain. "),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Contract"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Github"),(0,r.kt)("th",{parentName:"tr",align:"center"},"CodeId"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"CW20"),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("a",{parentName:"td",href:"https://github.com/xpladev/cw-plus"},"https://github.com/xpladev/cw-plus")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("a",{parentName:"td",href:"https://explorer.xpla.io/mainnet/code/1"},"1"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"CW721"),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("a",{parentName:"td",href:"https://github.com/xpladev/cw-nfts"},"https://github.com/xpladev/cw-nfts")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("a",{parentName:"td",href:"https://explorer.xpla.io/mainnet/code/3"},"3"))))),(0,r.kt)("p",null,"When developing a Web3 game, you might need functionalities beyond CW20 and CW721 contracts. In this step, we will write a Cosmwasm contract in Rust and deploy it to the XPLA blockchain."),(0,r.kt)("h2",{id:"index"},"Index"),(0,r.kt)("p",null,"We'll explore creating a Cosmwasm contract in the following steps:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"/startlearning/tutorial/deep-understand-xpla/write-contract#prerequisite"},"Prerequisite"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"/startlearning/tutorial/deep-understand-xpla/write-contract#order-of-storecode"},"Contract Creation Process"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"/startlearning/tutorial/deep-understand-xpla/write-contract#build-contract"},"Code Provision and Build"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"/startlearning/tutorial/deep-understand-xpla/write-contract#use-contract"},"Creating and Using the Contract")))),(0,r.kt)("h2",{id:"prerequisite"},"Prerequisite"),(0,r.kt)("p",null,"Cosmwasm contracts are written in the Rust programming language. Please install ",(0,r.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/book/ch01-01-installation.html"},"Rust")," that matches your OS. Additionally, since Docker is used for building, make sure to install ",(0,r.kt)("a",{parentName:"p",href:"https://www.docker.com/"},"Docker")," as well."),(0,r.kt)("p",null,"If you want to write contract code directly, you'll need some knowledge about Rust. We've prepared some documents that can help you learn Rust. "),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Guide"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Link"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"The Rust Programming Language"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://doc.rust-lang.org/book/ch00-00-introduction.html"},"https://doc.rust-lang.org/book/ch00-00-introduction.html"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"The Cargo Book"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://doc.rust-lang.org/cargo/index.html"},"https://doc.rust-lang.org/cargo/index.html"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Cosmwasm book"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://book.cosmwasm.com/basics/entry-points.html"},"https://book.cosmwasm.com/basics/entry-points.html"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Learn X in Y minutes"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://learnxinyminutes.com/docs/rust/"},"https://learnxinyminutes.com/docs/rust/"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"CosmWasm Starter Pack"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://github.com/CosmWasm/cw-template"},"https://github.com/CosmWasm/cw-template"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"XPLA Docs"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://docs.xpla.io/develop/develop/smart-contract-guide/wasm/writing-the-contract/"},"https://docs.xpla.io/develop/develop/smart-contract-guide/wasm/writing-the-contract/"))))),(0,r.kt)("p",null,"It's okay if you don't know Rust perfectly. Reading over and following the below content is also a good option. Feel free to proceed with learning at your own pace."),(0,r.kt)("h2",{id:"order-of-storecode"},"Contract Creation Process"),(0,r.kt)("p",null,"Let's first understand how Cosmwasm contracts are created on the XPLA blockchain."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Write contract code in Rust.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Build the written contract code to generate a ",(0,r.kt)("strong",{parentName:"p"},".wasm")," file.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Deploy the created ",(0,r.kt)("strong",{parentName:"p"},".wasm")," file to the XPLA blockchain. Deployment can be done through the ",(0,r.kt)("inlineCode",{parentName:"p"},"StoreCode")," Method transaction. ",(0,r.kt)("a",{parentName:"p",href:"https://vault.xpla.io/contract/store"},"Vault")," makes it easy to deploy ",(0,r.kt)("strong",{parentName:"p"},".wasm")," files.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Once deployed, a Code ID is assigned. You can use this Code ID to create contracts using the ",(0,r.kt)("inlineCode",{parentName:"p"},"Instantiate")," Method transaction. Contracts instantiated with the same Code ID share the same code and have similar functionalities. However, the specifics may differ based on the initial values provided during instantiation."))),(0,r.kt)("p",null,"We'll follow the steps above to create a contract in this example."),(0,r.kt)("h2",{id:"build-contract"},"Code Provision and Build"),(0,r.kt)("p",null,"Download the contract code from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/xpladev/academy/tree/main/example/CosmwasmContract"},"GitHub"),". The code structure is as follows. The example contract we're creating has the functionality of recording a user's game results. "),(0,r.kt)(o,{mdxType:"RustContractCode"}),(0,r.kt)("br",null),(0,r.kt)("p",null,"You can build it using the command provided below. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cargo build\ncargo install cargo-run-script\ncargo run-script optimize\n")),(0,r.kt)("p",null,"Once the build is complete, an ",(0,r.kt)("inlineCode",{parentName:"p"},"artifacts/game_data_save.wasm")," file will be generated. "),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("p",null,"  During the build process, you might encounter an error like the one below. "),(0,r.kt)(y.Z,{mdxType:"CodeBlock"},'docker: Error response from daemon: create %cd%: "%cd%" includes invalid characters for a local volume name, only "[a-zA-Z0-9][a-zA-Z0-9_.-]" are allowed. If you intended to pass a host directory, use absolute path.')),"To resolve this, modify line 23 of the Cargo.toml file as shown, and then try building again.",(0,r.kt)(v.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,r.kt)(w.Z,{value:"win",label:"Windows WSL",mdxType:"TabItem"},(0,r.kt)(y.Z,{mdxType:"CodeBlock"},'optimize = """docker run --rm -v "$(wslpath -w $(pwd))":/code --mount type=volume,source="$(basename "$(pwd)")_cache",target=/code/target --mount type=volume,source=registry_cache,target=/usr/local/cargo/registry cosmwasm/rust-optimizer:0.12.6"""')),(0,r.kt)(w.Z,{value:"mac",label:"macOS/linux",mdxType:"TabItem"},(0,r.kt)(y.Z,{mdxType:"CodeBlock"},'optimize = """docker run --rm -v "$(pwd)":/code --mount type=volume,source="$(basename "$(pwd)")_cache",target=/code/target --mount type=volume,source=registry_cache,target=/usr/local/cargo/registry cosmwasm/rust-optimizer:0.12.6"""')),(0,r.kt)(w.Z,{value:"arm64",label:"arm64",mdxType:"TabItem"},(0,r.kt)(y.Z,{mdxType:"CodeBlock"},'optimize = """docker run --rm -v "$(pwd)":/code --mount type=volume,source="$(basename "$(pwd)")_cache",target=/code/target --mount type=volume,source=registry_cache,target=/usr/local/cargo/registry cosmwasm/rust-optimizer-arm64:0.12.6"""')))),(0,r.kt)("h2",{id:"use-contract"},"Creating and Using the Contract"),(0,r.kt)("h3",{id:"storecode"},"StoreCode"),(0,r.kt)("p",null,"Let's deploy the generated ",(0,r.kt)("strong",{parentName:"p"},".wasm")," file to the blockchain using the ",(0,r.kt)("inlineCode",{parentName:"p"},"StoreCode")," Method transaction. You can do this via the ",(0,r.kt)("a",{parentName:"p",href:"https://vault.xpla.io/contract/store"},"Vault website")," or using JavaScript, as shown below. In this example, the ",(0,r.kt)("strong",{parentName:"p"},".wasm")," file is named ",(0,r.kt)("strong",{parentName:"p"},"game_data_save.wasm.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"{17}","{17}":!0},"const { LCDClient, MnemonicKey, MsgStoreCode } = require(\"@xpla/xpla.js\");\nconst fs = require('fs');\n\nconst lcd = new LCDClient({\n    chainID: 'cube_47-5',\n    URL: 'https://cube-lcd.xpla.dev'\n});\n\nasync function main() {\n    const mk = new MnemonicKey({\n        mnemonic: 'myth snow ski simple century dad gun dolphin sail lawsuit fringe image toast betray frown keep harbor flash table prevent isolate panic tag vehicle',\n    })\n\n    const sender = lcd.wallet(mk).key.accAddress;\n\n    const signedTx = await lcd.wallet(mk).createAndSignTx({\n        msgs: [new MsgStoreCode(sender, fs.readFileSync('game_data_save.wasm').toString('base64'))],\n    });\n\n    const txResult = await lcd.tx.broadcastSync(signedTx);\n    console.log(\"Your Transaction Hash: \" + txResult.txhash);\n}\nmain()\n")),(0,r.kt)("p",null,"We'll create a transaction and confirm the Code ID from the Explorer. The Code ID for the created contract in the example is ",(0,r.kt)("a",{parentName:"p",href:"https://explorer.xpla.io/testnet/tx/90EF62EB26FD3EBE7797EA4059E0D5B700498BB9D98F0AD8A33E54E7A37C02C4#EventLogs"},"571"),"."),(0,r.kt)("h3",{id:"instantiate"},"Instantiate"),(0,r.kt)("p",null,"Now, let's instantiate a contract using the code deployed through StoreCode. This can be done through ",(0,r.kt)("a",{parentName:"p",href:"https://vault.xpla.io/contract/instantiate"},"Vault")," or using JavaScript, as shown below. "),(0,r.kt)(f,{mdxType:"Instantiate571"}),(0,r.kt)("br",null),(0,r.kt)("p",null,"Let's examine how the Cosmwasm contract and the Instantiate transaction interact. When creating the Instantiate transaction, we set the ",(0,r.kt)("strong",{parentName:"p"},"init_msg")," as shown below. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const init_msg = {\n  owner: "xpla1cwduqw0z8y66mnfpev2mvrzzzu98tuexepmwrk",\n  description: "Game Data Contract",\n};\n')),(0,r.kt)("p",null,"The initial value you provide here will be passed as an argument of the ",(0,r.kt)("strong",{parentName:"p"},"InstantiateMsg")," type in the ",(0,r.kt)("inlineCode",{parentName:"p"},"src/lib.rs")," file's ",(0,r.kt)("strong",{parentName:"p"},"instantiate")," function. The ",(0,r.kt)("strong",{parentName:"p"},"tract.instantiate")," function calls the instantiate Method from the ",(0,r.kt)("inlineCode",{parentName:"p"},"src/execute.rs")," file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/lib.rs" {2,6,9}',title:'"src/lib.rs"',"{2,6,9}":!0},"#[entry_point]\npub fn instantiate(\n    deps: DepsMut,\n    env: Env,\n    info: MessageInfo,\n    msg: InstantiateMsg,\n) -> StdResult<Response> {\n    let tract: GameDataSaveContract<'_> = GameDataSaveContract::default();\n    tract.instantiate(deps, env, info, msg)\n}\n")),(0,r.kt)("p",null,"Using the ",(0,r.kt)("strong",{parentName:"p"},"save")," Method of the ",(0,r.kt)("strong",{parentName:"p"},"Item")," struct from the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/CosmWasm/cw-storage-plus"},"cw-storage-plus")," Module, we store the initial value in the blockchain database. Once the result is sent with ",(0,r.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/std/result/"},"Ok"),", the Instantiate is complete. More information about DepsMut and Env struct can be found in the ",(0,r.kt)("a",{parentName:"p",href:"https://book.cosmwasm.com/basics/entry-points.html"},"Cosmwasm Book")," and ",(0,r.kt)("a",{parentName:"p",href:"https://docs.rs/cosmwasm-std/latest/cosmwasm_std/"},"cosmwasm_std"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/execute.rs" {1,14,16}',title:'"src/execute.rs"',"{1,14,16}":!0},"pub fn instantiate(\n  &self,\n  deps: DepsMut,\n  _env: Env,\n  _info: MessageInfo,\n  msg: InstantiateMsg,\n) -> StdResult<Response> {\n  let config = Config {\n    owner: deps.api.addr_validate(&msg.owner)?,\n    owner_candidate: deps.api.addr_validate(&msg.owner)?,\n    description: msg.description,\n  };\n\n  self.config.save(deps.storage, &config)?;\n\n  Ok(Response::new())\n}\n")),(0,r.kt)("h3",{id:"execute"},"Execute"),(0,r.kt)("p",null,"Let's proceed with the Execute step. This can also be done through ",(0,r.kt)("a",{parentName:"p",href:"https://vault.xpla.io/contract/execute/xpla1k6ufjtkyjnxgkmxjew96n2kssdzslpnp398ghm82hk5tt2xdls9spnufcz"},"Vault")," or JavaScript. The JavaScript code is provided below. "),(0,r.kt)(b,{mdxType:"Execute571"}),(0,r.kt)("br",null),(0,r.kt)("p",null,"Let's understand how the Cosmwasm contract and the Execute transaction interact. When creating the Execute transaction, we set the ",(0,r.kt)("strong",{parentName:"p"},"executeMsg")," as shown below. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const executeMsg = {\n  save_data : {\n      user : "xpla1cwduqw0z8y66mnfpev2mvrzzzu98tuexepmwrk",\n      last_stage : 10,\n      high_score : 100,\n      game_gold : 10\n  }\n};\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"executeMsg")," value becomes an argument of the ",(0,r.kt)("strong",{parentName:"p"},"ExecuteMsg")," type in the ",(0,r.kt)("inlineCode",{parentName:"p"},"src/lib.rs")," file's ",(0,r.kt)("strong",{parentName:"p"},"execute")," function. The ",(0,r.kt)("strong",{parentName:"p"},"tract.execute")," function calls the ",(0,r.kt)("strong",{parentName:"p"},"execute")," Method from the ",(0,r.kt)("inlineCode",{parentName:"p"},"src/execute.rs")," file. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/lib.rs" {2,6,9}',title:'"src/lib.rs"',"{2,6,9}":!0},"#[entry_point]\npub fn execute(\n    deps: DepsMut,\n    env: Env,\n    info: MessageInfo,\n    msg: ExecuteMsg,\n) -> Result<Response, ContractError> {\n    let tract: GameDataSaveContract<'_> = GameDataSaveContract::default();\n    tract.execute(deps, env, info, msg)\n}\n")),(0,r.kt)("p",null,"In the ",(0,r.kt)("inlineCode",{parentName:"p"},"src/execute.rs")," file, the ",(0,r.kt)("strong",{parentName:"p"},"execute")," method matches the pattern of the ",(0,r.kt)("strong",{parentName:"p"},"SaveData")," in the ",(0,r.kt)("strong",{parentName:"p"},"ExecuteMsg"),". Thus, we call the ",(0,r.kt)("strong",{parentName:"p"},"save_data")," Method from the same file. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/execute.rs" {1,6,9,14}',title:'"src/execute.rs"',"{1,6,9,14}":!0},"pub fn execute(\n  &self,\n  deps: DepsMut,\n  env: Env,\n  info: MessageInfo,\n  msg: ExecuteMsg\n) -> Result<Response, ContractError> {\n  match msg{\n    ExecuteMsg::SaveData { \n      user, \n      last_stage,\n      high_score, \n      game_gold \n    } => self.save_data(deps, env, info, user, last_stage, high_score, game_gold),\n\n    ExecuteMsg::UpdateConfig { \n      owner_candidate,\n      description,\n    } => self.update_config(deps, env, info, owner_candidate, description),\n\n    ExecuteMsg::AllowOwner {\n\n    } => self.allow_owner(deps, env, info),\n  }\n}\n")),(0,r.kt)("p",null,"The code for the ",(0,r.kt)("strong",{parentName:"p"},"save_data")," Method is provided below. Using the ",(0,r.kt)("strong",{parentName:"p"},"update")," Method of the ",(0,r.kt)("strong",{parentName:"p"},"Map")," struct from the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/CosmWasm/cw-storage-plus"},"cw-storage-plus")," Module, you can see that the values from ",(0,r.kt)("strong",{parentName:"p"},"executeMsg")," values (last_stage, high_score, game_gold) are being updated in the blockchain database. Once the result is sent with ",(0,r.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/std/result/"},"Ok"),", the Execute is complete."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/execute.rs" {1,17,21,26,30}',title:'"src/execute.rs"',"{1,17,21,26,30}":!0},'pub fn save_data(\n  &self,\n  deps: DepsMut,\n  _env: Env,\n  info: MessageInfo,\n  user: String,\n  last_stage: Option<u64>,\n  high_score: Option<u64>,\n  game_gold: Option<i64>,\n) -> Result<Response, ContractError> {\n  let config: Config = self.config.load(deps.storage)?;\n  \n  if info.sender != config.owner {\n    return Err(ContractError::Unauthorized {})\n  }\n\n  self.game_data.update(deps.storage, user.clone(), |res| -> StdResult<GameData> { \n    let mut data = res.unwrap_or_default();\n    if let Some(ls) = last_stage {\n      if ls > data.last_stage {\n        data.last_stage = ls;\n      }\n    }\n    if let Some(hs) = high_score {\n      if hs > data.high_score {\n        data.high_score = hs;\n      }\n    }\n    if let Some(gg) = game_gold {\n      data.game_gold += gg;\n    }\n    Ok(data)\n  })?;\n\n\n  Ok(Response::new()\n        .add_attribute("action", "save_data")\n        .add_attribute("user", user))\n\n}\n')),(0,r.kt)("h3",{id:"query"},"Query"),(0,r.kt)("p",null,"Query can be conveniently done through the ",(0,r.kt)("a",{parentName:"p",href:"https://explorer.xpla.io/testnet/address/xpla1k6ufjtkyjnxgkmxjew96n2kssdzslpnp398ghm82hk5tt2xdls9spnufcz#InitMsg"},"Explorer Contract Details' InitMsg tab")," or through ",(0,r.kt)("a",{parentName:"p",href:"https://vault.xpla.io/contract"},"Vault"),". In this example, we'll use JavaScript. "),(0,r.kt)(k,{mdxType:"Query571"}),(0,r.kt)("br",null),(0,r.kt)("p",null,"Since we previously executed ",(0,r.kt)("strong",{parentName:"p"},"save_data")," Method with the values last_stage and game_gold set to 10 and high_score set to 100, the Query result aligns with the executed inputs. The Query result shows that the game_gold value is greater than 10, which is due to the game_gold value accumulating with each Execute. Take another look at how the code in the ",(0,r.kt)("a",{parentName:"p",href:"/startlearning/tutorial/deep-understand-xpla/write-contract#execute"},"previous section"),' handles storing the "game_gold" value in the Execute process. '),(0,r.kt)("p",null,"Let's take a look at how the Cosmwasm contract operates when you send a Query. First, let's examine how the ",(0,r.kt)("strong",{parentName:"p"},"queryMsg")," is defined as shown below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const queryMsg = {\n    game_data : {\n        user : "xpla1cwduqw0z8y66mnfpev2mvrzzzu98tuexepmwrk"\n    }\n}\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"queryMsg")," value becomes an argument of the ",(0,r.kt)("strong",{parentName:"p"},"QueryMsg")," type in the ",(0,r.kt)("inlineCode",{parentName:"p"},"src/lib.rs")," file's ",(0,r.kt)("strong",{parentName:"p"},"query")," function. The ",(0,r.kt)("strong",{parentName:"p"},"tract.query")," function calls the query Method from the ",(0,r.kt)("inlineCode",{parentName:"p"},"src/query.rs")," file. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/lib.rs" {2,4}',title:'"src/lib.rs"',"{2,4}":!0},"#[entry_point]\npub fn query(deps: Deps, env: Env, msg: QueryMsg) -> StdResult<Binary> {\n    let tract: GameDataSaveContract<'_> = GameDataSaveContract::default();\n    tract.query(deps, env, msg)\n}\n")),(0,r.kt)("p",null,"In the ",(0,r.kt)("inlineCode",{parentName:"p"},"src/query.rs")," file, the ",(0,r.kt)("strong",{parentName:"p"},"query")," method matches the pattern of the ",(0,r.kt)("strong",{parentName:"p"},"GameData")," in the ",(0,r.kt)("strong",{parentName:"p"},"QueryMsg"),". Therefore, it calls the ",(0,r.kt)("strong",{parentName:"p"},"game_data")," method within the same file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/query.rs" {4}',title:'"src/query.rs"',"{4}":!0},"pub fn query(&self, deps: Deps, _env: Env, msg: QueryMsg) -> StdResult<Binary> {\n  match msg {\n    QueryMsg::Config {} => to_binary(&self.config(deps)?),\n    QueryMsg::GameData { user } => to_binary(&self.game_data(deps, user)?)\n  }\n}\n")),(0,r.kt)("p",null,"The code for the ",(0,r.kt)("strong",{parentName:"p"},"game_data")," method is as follows. It uses the ",(0,r.kt)("strong",{parentName:"p"},"may_load")," method of the ",(0,r.kt)("strong",{parentName:"p"},"Map")," struct from the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/CosmWasm/cw-storage-plus"},"cw-storage-plus")," Module to retrieve the user's game data value from the blockchain database. Afterward, when the result is sent as ",(0,r.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/std/result/"},"Ok"),", the Query process is also finished."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/query.rs" {6}',title:'"src/query.rs"',"{6}":!0},"fn game_data(\n  &self, \n  deps: Deps,\n  user: String,\n) -> StdResult<GameData> {\n  let data = self.game_data.may_load(deps.storage, user)?;\n  if let Some(user_data) = data {\n    return Ok(user_data)\n  } else {\n    return Ok(GameData{\n      last_stage: 0,\n      high_score: 0,\n      game_gold: 0,\n    })\n  }\n}\n")),(0,r.kt)("h2",{id:"conclusion"},"Wrapping Up"),(0,r.kt)("p",null,"So far, we've examined the Cosmwasm contract code to understand how Instantiate, Execute, and Query processes work. Using the provided example, you can develop your own Cosmwasm contract. There are also other examples related to Cosmwasm contract development available in the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.xpla.io/develop/develop/smart-contract-guide/wasm/writing-the-contract/"},"Docs")," and ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/CosmWasm/cw-template"},"CosmWasm Starter Pack"),". Feel free to explore and experiment with creating your own contracts!"))}M.isMDXComponent=!0}}]);